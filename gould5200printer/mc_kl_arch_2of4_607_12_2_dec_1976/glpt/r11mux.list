	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 1
	GLPT;R11MUX 103	PAGE 1 	

					.TITLE TERMINAL MULTIPEXER AND GOULD DRIVER
					
					
					;  REGISTERS 
					
		000000			R0=%0
		000001			R1=%1
		000002			R2=%2
		000003			R3=%3
		000004			R4=%4
		000005			R5=%5
		000006			SP=%6
		000007			PC=%7
					
					;  MISCELLANEOUS CONSTANT DEFINITIONS
					
		000004			MXTTTY==4		; MAXIMUM NUMBER OF TERMINALS THIS ASSEMBLY
		000004			MAXTTY==4		; MAXIMUM NUMBER OF CHANNELS SUPPORTED CURRENT ITS ASSEMBLY
		000002			MXRTTY==2		; NUMBER OF DEVICE REGISTER RECEIVE TTYS
		000003			MXXTTY==3		; NUMBER OF DEVICE REGISTER TRANSMIT TTYS
		000001			MXATTY==1		; NUMBER OF ANN ARBOR TERMINALS
		000340			PRIOR0==7_5		; MASK FOR BIC APPLIED TO PS
		000340			PRIOR7==7_5		; MASK FOR BIS APPLIED TO PS
		000340			P7=PRIOR7
		000240			P5=5_5
		000007			CG==7			; <CNTL>-G
		000034			CBSL==34		; <CNTL>-\
		000240			NOPIN==240		; NOP INSTRUCTION
		000001			WAITIN==1		; WAIT INSTRUCTION
		000410			LBUFL==410	; MAXIMUM SIZE OF A LINE BUFFER (IN BYTES)
		010000			RSTRLN==10000	; LENGTH OF TEMPORARY STRING BUFFERS
		000024			TSTRLN==24
		177600			STRIP==177600	; BIT IN BUFFER WORD WHICH INDICATED STRIPED GRAPHICS
		177400			LHS==177400	; LEFT HAND SIDE OF WORD MASK
		000030			GLDTIM==30	; TIME (IN 30TH'S OF SECOND) FOR SMEAR TIMEOUT
		137472			CORLIM==137472	; LIMIT OF USABLE CORE (24K-LOADERS)
					
					;  CONSTANTS FOR INITIALIZATION OF NON-STANDARD DEVICES 
					
		000000			DR11MI==0
		000101			KEYBDI==101
		000000			IMLACI==0
		040000			INVBIT==40000	; INDICATES VALID DATA ON INPUT MULTIPLEXOR
					
					;  RECEIVE BUFFER PARAMETERS 
		000300			RIBFLN==300
		000300			ROBFLN==300
					
		000276			ALCMAX==276	; MAXIMUM PERMISSABLE ALLOCATION
							; 2 CHARACTERS LESS THAN BUFFER SIZE, ONE TO ALLOW
							; FOR ^G INSERTION AND ONE FOR PATHOLOGICAL FENCEPOST
							; INTERACTIONS
					
		000137			ALCLIM==ALCMAX/2	; AT THIS POINT, ADD TO ALLOCATION
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 2
	GLPT;R11MUX 103	PAGE 1.1 	

		000137			ALCINC==ALCMAX/2	; THIS IS HOW MUCH TO INCREMENT THE ALLOCATION BY
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 3
	GLPT;R11MUX 103	PAGE 1.2 	

					
					; GOULD COMMAND CODES
		000000			 %GCFF==0	; TOP-OF-FORM COMMAND (128 RASTERS ON ROLL PAPER)
		000001			 %GCGRF==1	; GRAPHIC MODE COMMAND
		000002			 %GCCUT==2	; CUT COMMAND (NO CUTTER ON THIS MACHINE, THOUGH)
		000003			 %GCON==3	; TURN PRINTER ON
		000004			 %GCOFF==4	; TURN PRINTER OFF
		000005			 %GCLSL==5	; LAST LINE (GRAPHIC MODE).  => 2 MORE SCAN LINES.
		000006			 %GCION==6	; INTERRUPT ON
		000007			 %GCIOF==7	; INTERRUPT OFF
		000200			 %GCHOM==200	; HOME (128 RASTER UNITS)
		000201			 %GCADV==201	; ADVANCE ONE LINE
					
					; PSEUDO COMMAND CODES
					
		000300			 %GCSRP==300	; START OF REPEAT
		000301			 %GCERP==301	; END OF REPEAT
					
					
					; MACRO COMMAND CODES
					
		140000			 SLALPH==140000	; SELECT ALPHA MODE
		150000			 SLLGRF==150000	; SELECT LOW SPEED GRAPHICS MODE
		160000			 SLHGRF==160000	; SELECT HIGH SPEED GRAPHICS MODE
		170000			 SLEOF==170000	; EOF (TAIL SHEET HACKERY)
					
					; GOULD STATUS BITS
		000400			 %GSNRD==400	; NOT READY (INTERLOCK TRIPPED)
		002000			 %GSDON==2000	; DMA TRANSFER COMPLETE
		004000			 %GSBSY==4000	; BUSY (PAPER MOVEMENT, SYSTEM BEING RESET, ETC.)
		010000			 %GSVAC==10000	; VACUUM FAULT
		020000			 %GSPAP==20000	; PAPER LOW
		040000			 %GSTIM==40000	; HIGH SPEED GRAPHICS TIMEOUT
		040400			 %GSERR==40400	; ALL ERROR BITS EXCEPT PAPER LOW
					
					
					
					;  SPECIAL GOULD COMMUNICATION BYTE CODES
					
		000205			%CCSOD=205	; ESCAPE FOR BEGINNING OF DATA
		000206			%CCEOD=206	; ESCAPE FOR END OF DATA
		000215			%CCQOT=215	; TO QUOTE 8 BIT CODES IN GRAPHICS MODE
		000301			%CCACK=301	; ARE WE BEING PAGED?
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 4
	GLPT;R11MUX 103	PAGE 1.3 	

					
					; 12-BIT KEYBOARD CODES
		177740			MASK37==177740
		177774			MAXMUX==177774		; NUMBER OF MULTIPLEXED INPUT LINES (POWER OF 2 -USED AS A MASK)
		177600			MASCII=177600		; MASK THE ASCII PART OF THE DATA
		177400			MBYTE=177400		; MASK FOR CLEARING THE LEFT BYTE (MAINLY FOR FLUSHING SIGN EX.)
		000200			%SPKEY=200		; SPECIAL KEY
		177740			%SBITS=MASK37		; SPECIAL BITS (META,TOP, CTRL, SHIFT,SHIFT LOCK)
		000010			%SHLOK=10		; SHIFT LOCK (LH BYTE ON INPUT)
					
					; ANN ARBOR CODES
		000017			%AAPOS==17
					
					;  TRANSMIT BUFFER PARAMETERS 
					
		000040			TIBFLN==40
		000230			TOBFLN==MAXTTY*<40+6>
					
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 5
	GLPT;R11MUX 103	PAGE 1.4 	INTERFACE DEFINITIONS 

					.SBTTL  INTERFACE DEFINITIONS 
					
					; DEC INTERFACES
					
					; SERIAL INTERFACES
		177560			%CRCSR==177560			; CONSOLE TTY
		177562			%CRBUF==177562
		177564			%CXCSR==177564
		177566			%CXBUF==177566
		175610			%DRCSR==175610			; DL-11E 40 KBAUD
		175612			%DRBUF==175612
		175614			%DXCSR==175614
		175616			%DXBUF==175616
		175620			%ERCSR==175620			; DL-11E 9600 BAUD
		175622			%ERBUF==175622
		175624			%EXCSR==175624
		175626			%EXBUF==175626
		175630			%FRCSR==175630			; DL-11E 9600 BAUD
		175632			%FRBUF==175632
		175634			%FXCSR==175634
		175636			%FXBUF==175636
		175640			%GRCSR==175640			; DL-11E 9600 BAUD
		175642			%GRBUF==175642
		175644			%GXCSR==175644
		175646			%GXBUF==175646
					
					; PARALLEL INTERFACES
					; INPUT
		167760			%I1ACS==167760			; DR-11L SIDE 1
		167762			%I1ABF==167762
		167764			%I1BCS==167764			; DR-11L SIDE 2
		167766			%I1BBF==167766
					; OUT
		167770			%O1ACS==167770			; DR-11M SIDE 1
		167772			%O1ABF==167772
		167774			%O1BCS==167774			; DR-11M SIDE 2
		167776			%O1BBF==167776
					
		000000			%UNDEF==0
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 6
	GLPT;R11MUX 103	PAGE 1.5 	INTERFACE DEFINITIONS 

					; HOME BREW HARDWARE
					
							; ANN ARBOR CONTROLLER
		167770			%AACS==%O1ACS
		167772			%AABF==%O1ABF
					
							; KEYBOARD MULTIPLEXOR
		167760			%KYSTA==%I1ACS		; STATUS REGISTER
		167762			%KYBUF==%I1ABF		; BUFFER REGISTER
					
							; DIGIVUE PLASMA DISPLAY
		000000			%PLACS==%UNDEF		; STATUS
		000000			%PLXBF==%UNDEF		; X REGISTER
		000000			%PLYBF==%UNDEF		; Y REGISTER
		000000			%PLDBF==%UNDEF		; DATA
					
					
					; COMMERCIAL INTERFACES
					
							; GOULD ELECTROSTATIC PRINTER PLOTTER
		166000			%GLCSR=166000		; COMMAND AND STATUS REGISTER
		166002			%GLWC=166002		; NEGATIVE WORD COUNT REG
		166004			%GLCA=166004		; CURRENT ADDRESS REG
					
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 7
	GLPT;R11MUX 103	PAGE 1.6 	DEVICE AND TTY DEFINITIONS 

					.SBTTL  DEVICE AND TTY DEFINITIONS 
					
					
		175610			RDST0==%DRCSR		; DEVICE 0 -> DL-11 CONNECTED TO PDP-10
		175612			RDBF0==%DRBUF
		175614			XDST0==%DXCSR
		175616			XDBF0==%DXBUF
					
		175620			RTST0==%ERCSR		; TTY 0 (T23) -> DL-11 CONNECTED TO IMLAC
		175622			RTBF0==%ERBUF
		175624			XTST0==%EXCSR
		175626			XTBF0==%EXBUF
					
		177560			RTST1==%CRCSR		; TTY 1 (T24) -> CONSOLE TTY, CONNECTED TO TEKTRONIX
		177562			RTBF1==%CRBUF		; (NO CHARACTER RECEPTION STATUS BITS)
		177564			XTST1==%CXCSR
		177566			XTBF1==%CXBUF
					
		167770			XTST2==%AACS		; TTY 2 (T25) -> ANN ARBOR DISPLAY CONTROLLER
		167772			XTBF2==%AABF
					
		166000			GLDCSR==%GLCSR		; TTY 3 (T26) -> GOULD LINE PRINTER (SPECIAL HARDWARE REGISTERS)
		166002			GLDWC==%GLWC
		166004			GLDCA==%GLCA
					
		000000			PLPSTA==%PLACS		; TTY 4  (T27) -> PLASMA PANEL DISPLAY
		000000			PLXBUF==%PLXBF
		000000			PLYBUF==%PLYBF
		000000			PLDBUF==%PLDBF
					
					; SPECIAL DEVICES
					
		167760			KEYSTA==%KYSTA		; KEYBOARD MULTIPLEXOR
		167762			KEYBUF==%KYBUF
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 8
	GLPT;R11MUX 103	PAGE 1.7 	TABLE OFFSET DEFINITIONS

					.SBTTL TABLE OFFSET DEFINITIONS
					
					;  RECEIVE STATUS TABLE OFFSETS 
		000000			RI.PTR==0
		000002			RI.END==2
		000004			RI.BEG==4
		000006			RI.LIM==6
		000010			RI.FLG==10
		000012			RO.PTR==12
		000014			RO.END==14
		000016			RO.BEG==16
		000020			RO.LIM==20
		000022			AL.FLG==22
		000025			TTYNUM==25
		000030			RI.BLK==30
		000032			RO.BLK==32
		000034			MR.BLK==34
		000036			CG.BLK==36
		000040			R.FLGS==40
		000042			RS.PTR==42
		000044			RS.CNT==44
		000046			RO.ESF==46
		000050			RO.ESC==50
		000052			JMPESC==52
		000054			ROW==54
		000056			COL==56
					
					
					;  TRANSMIT STATUS TABLE OFFSETS 
					
		000000			TI.PTR==0
		000002			TI.END==2
		000004			TI.BEG==4
		000006			TI.LIM==6
		000010			TI.FLG==10
		000012			TO.PTR==12
		000014			TO.END==14
		000016			TO.BEG==16
		000020			TO.LIM==20
		000022			CG.FLG==22
		000025			TTYNUM==25
		000030			TI.BLK==30
		000032			TO.BLK==32
		000034			MT.BLK==34
		000036			AL.BLK==36
		000040			T.FLGS==40
		000042			TS.PTR==42
		000044			TS.CNT==44
					
					;  TRANSMIT OUTPUT DEVICE STATUS OFFSETS 
					
		000000			OD.PTR==0
		000002			OD.END==2
		000004			OD.BEG==4
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 9
	GLPT;R11MUX 103	PAGE 1.8 	TABLE OFFSET DEFINITIONS

		000006			OD.LIM==6
		000010			OD.BLK==10
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 10
	GLPT;R11MUX 103	PAGE 1.9 	INTERRUPT AND TRAP VECTORS 

					.SBTTL  INTERRUPT AND TRAP VECTORS 
					
		000004			%ERRV=4
		000010			%ILIV=10
		000014			%BPTV=14
		000020			%IOTV=20
		000024			%PWRV=24
		000030			%EMTV=30
		000034			%TRPV=34
		000060			%CLRV=60
		000064			%CLXV=64
		000100			%LKV=100
		000174			%GLDV=174
		000200			%KEYV=200
					
		000210			%AADCV=210
		000214			%PLPV=214
		000300			%DLRV=300
		000304			%DLXV=304
		000310			%ELRV=310
		000314			%ELXV=314
		000320			%FLRV=320
		000324			%FLXV=324
		000330			%GLRV=330
		000334			%GLXV=334
					
		000340			%MSTR==340	; MASTER PRIORITY, NO CONDITION CODES SET
					
						; THESE GIVE MASTER PRIORITY WITH CONDITION CODE BITS SET TO
						; NOTIFY THE UNEXPECTED TRAP HANDLER WHICH STATE WAS RAISED
						; IDEALLY THEY SHOULD NEVER HAVE TO BE USED
					
		000341			%MSTR1==341
		000342			%MSTR2==342
		000343			%MSTR3==343
		000344			%MSTR4==344
		000345			%MSTR5==345
		000346			%MSTR6==346
		000347			%MSTR7==347
					
		000200			%CLRPR=200		; PRI 4, (DEVICE AT BR4)
		000200			%CLTPR=200		; PRI 4, (DEVICE AT BR4)
		000200			%KEYPR=200		; PRI 4, (DEVICE AT BR4)
		000200			%PLPPR=200
		000200			%AADPR=200		; PRI 4, (DEVICE AT BR4)
		000200			%ELRPR=200		; PRI 4, (DEVICE AT BR4)
		000200			%ELXPR=200		; PRI 4, (DEVICE AT BR4)
		000200			%FLRPR=200		; PRI 4, (DEVICE AT BR4)
		000200			%FLXPR=200		; PRI 4, (DEVICE AT BR4)
		000200			%GLRPR=200		; PRI 4, (DEVICE AT BR4)
		000200			%GLXPR=200		; PRI 4, (DEVICE AT BR4)
		000240			%GLDPR=240		; PRI 5, (DEVICE AT BR5)
		000300			%DLRPR=300		; PRI 6, (DEVICE AT BR6)
		000300			%DLXPR=300		; PRI 6, (DEVICE AT BR6)
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 11
	GLPT;R11MUX 103	PAGE 1.10 	INTERRUPT AND TRAP VECTORS 

		000300			%LKPR=300		; PRI 6, (DEVICE AT PSEUDO BR6)
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 12
	GLPT;R11MUX 103	PAGE 1.11 	INTERRUPT AND TRAP VECTORS 

					
		000004			.=%ERRV
	000004	003152				CPUERR			; CPU ERROR
	000006	000341				%MSTR1
		000010			.=%ILIV
	000010	003152				ILLOPR			; ILLEGAL INSTRUCTIONS
	000012	000342				%MSTR2
		000014			.=%BPTV
	000014	003152				BPTTRP			; BREAKPOINT TRAP
	000016	000343				%MSTR3
		000020			.=%IOTV
	000020	003152				IOTTRP			; IOT TRAP
	000022	000344				%MSTR4
		000024			.=%PWRV
	000024	003316				POWROF			; POWER FAIL - RESTART
	000026	000340				%MSTR
		000030			.=%EMTV
	000030	003152				EMTTRP			; EMULATOR TRAP
	000032	000345				%MSTR5
		000034			.=%TRPV
	000034	003152				UUOH			; TRAP INSTRUCTION
	000036	000346				%MSTR6
		000060			.=%CLRV
	000060	003026				INRT1			; CONSOLE RECEIVED CHARACTER
	000062	000200				%CLRPR
		000064			.=%CLXV
	000064	003100				INTT1			; CONSOLE TRANSMITTED CHARACTER
	000066	000200				%CLTPR
		000100			.=%LKV
	000100	003160				CLKHND			; LINE FREQUENCY CLOCK
	000102	000300				%LKPR
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 13
	GLPT;R11MUX 103	PAGE 1.12 	INTERRUPT AND TRAP VECTORS 

		000174			.=%GLDV
	000174	004376				GLDINT			; GOULD INTERRUPT
	000176	000240				%GLDPR
		000200			.=%KEYV
	000200	004204				KEYINT			; KEYBOARD MULTIPLEXOR
	000202	000200				%KEYPR
		000210			.=%AADCV
	000210	003116				INTT2			; ANN ARBOR DISPLAY CONTROLLER
	000212	000200				%AADPR
		000214			.=%PLPV
	000214	005216				PLPINT			; PLASMA PANEL (BUFFER EMPTY)
	000216	000200				%PLPPR
		000300			.=%DLRV
	000300	003346				INRD0			; DL-11 #1 RECEIVED CHARACTER
	000302	000300				%DLRPR
		000304			.=%DLXV
	000304	003572				INTD0			; DL-11 #1 TRANSMITTED CHARACTER
	000306	000300				%DLXPR
		000310			.=%ELRV
	000310	003010				INRT0			; DL-11 #2 RECEIVED CHARACTER
	000312	000200				%ELRPR
		000314			.=%ELXV
	000314	003062				INTT0			; DL-11 #2 TRANSMITTED CHARACTER
	000316	000200				%ELXPR
		000320			.=%FLRV
	000320	003010				INRT0			; DL-11 #3 RECEIVED CHARACTER
	000322	000200				%FLRPR
		000324			.=%FLXV
	000324	003062				INTT0			; DL-11 #3 TRANSMITTED CHARACTER
	000326	000200				%FLXPR
		000330			.=%GLRV
	000330	003010				INRT0
	000332	000200				%GLRPR
		000334			.=%GLXV
	000334	003062				INTT0
	000336	000200				%GLXPR
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 14
	GLPT;R11MUX 103	PAGE 1.13 	TABLE AND VARIABLE DEFINITION MACROS

					.SBTTL TABLE AND VARIABLE DEFINITION MACROS
					;  UTILITY MACROS 
					
					
					.MACRO PUSH X
					.IRP Y,<X>
						MOV Y,-(SP)
					.ENDM
					.ENDM
					
					
					.MACRO POP X
					.IRP Y,<X>
						MOV (SP)+,Y
					.ENDM
					.ENDM
					
					
					.MACRO MASK LEVEL
						PUSH %PS
						MOV #<LEVEL>_5,%PS
					.ENDM
					
					.MACRO UNMASK
						POP %PS
					.ENDM
					
					.MACRO CALL X
						JSR PC,X
					.ENDM
					
					.MACRO JCALL X
						JMP X
					.ENDM
					
					.MACRO RET
						RTS PC
					.ENDM
					
					.MACRO MSG X
					.NCHR ZZ,^\X\
						.WORD ZZ
						.ASCII \X\
						.EVEN
					.ENDM
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 15
	GLPT;R11MUX 103	PAGE 1.14 	TABLE AND VARIABLE DEFINITION MACROS

					;  BRANCH MACROS 
					
					.MACRO SRTYMC NM
					PLAC=.
					.=SRTY+<NM*2>
					SRTY'NM:	BR .+<MRAL'NM-MRTY'NM>
					.=PLAC
					.ENDM
					
					.MACRO STTYMC NM
					PLAC=.
					.=STTY+<NM*2>
					STTY'NM:	BR .+<MTCG'NM-MTTY'NM>
					.=PLAC
					.ENDM
					
					.MACRO SRALMC NM,NM1
					PLAC=.
					.=SRAL+<NM*2>
					SRAL'NM:	BR .+<MRTY'NM1-MRAL'NM>
					.=PLAC
					.ENDM
					
					.MACRO STCGMC NM,NM1
					PLAC=.
					.=STCG+<NM*2>
					STCG'NM:	BR .+<MTTY'NM1-MTCG'NM>
					.=PLAC
					.ENDM
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 16
	GLPT;R11MUX 103	PAGE 1.15 	TABLE AND VARIABLE DEFINITION MACROS

					;  INQUIRY LOOP MACROS 
					
					.MACRO RPROC NM,NM1,MRTYSB,MRALSB	; CREATE A RECEIVE PROCESS
					MRTY'NM:	BR MRAL'NM
						MOV #NM*2,R3
						CALL MRTYSB
						JMP TESTLB
						SRTYMC NM
					MRAL'NM:	BR MRTY'NM1
						MOV #NM*2,R3
						CALL MRALSB
						JMP TESTLB
						SRALMC NM,NM1
					.ENDM
					
					.MACRO RSYM NM			; INQUIRE LOOP RECEIVE TERMINATION SYMBOL
					MRTY'NM:
					.ENDM
					
					.MACRO TPROC NM,NM1,MTTYSB,MTCGSB	; CREATE A TRANSMIT PROCESS
					MTTY'NM:	BR MTCG'NM
						MOV #NM*2,R3
						CALL MTTYSB
						JMP TESTLB
						STTYMC NM
					MTCG'NM:	BR MTTY'NM1
						MOV #NM*2,R3
						CALL MTCGSB
						JMP TESTLB
						STCGMC NM,NM1
					.ENDM
					
					.MACRO TSYM NM			; INQUIRE LOOP TRANSMIT TERMINATION SYMBOL
					MTTY'NM:
					.ENDM
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 17
	GLPT;R11MUX 103	PAGE 1.16 	TABLE AND VARIABLE DEFINITION MACROS

					;  BUFFER MACROS 
					
					.MACRO	RIBFMC NM		; RECEIVE INPUT BUFFER MACRO
					RIBF'NM:	.BLKW RIBFLN/2
					.ENDM
					
					.MACRO	ROBFMC NM		; RECEIVE OUTPUT BUFFER MACRO
					ROBF'NM:	.BLKW ROBFLN/2
					.ENDM
					
					.MACRO	TIBFMC NM		; TRANSMIT INPUT BUFFER MACRO
					TIBF'NM:	.BLKW TIBFLN/2
					.ENDM
					
					.MACRO	TOBFMC NM		; TRANSMIT OUTPUT BUFFER MACRO
					TOBF'NM:	.BLKW TOBFLN/2
					.ENDM
					
					.MACRO RSTRMC NM
					RSTR'NM:	.BLKW RSTRLN/2
					.ENDM
					
					.MACRO	TSTRMC NM
					TSTR'NM:	.BLKW TSTRLN/2
					.ENDM
					
					
					;  TABLE UTILITY MACROS 
					
					.MACRO VALCRE NAM,NUM		; VALUE TABLE CREATING MACRO
						.REPT NUM
						NAM'MC \.RPCNT,\.RPCNT+1
					.ENDR
					.ENDM
					
					.MACRO ADRMAC NAME,NM		; MACRO FOR ADDRESS TABLE ENTRY
						.WORD NAME'NM
					.ENDM
					
					.MACRO ADRCRE NAM,NUM		; ADDRESS TABLE CREATING MACRO
					NAM:	.REPT NUM
						ADRMAC NAM,\.RPCNT
					.ENDR
					.ENDM
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 18
	GLPT;R11MUX 103	PAGE 1.17 	TABLE AND VARIABLE DEFINITION MACROS

					
					;  STATUS TABLE MACROS 
					
					.MACRO	RSTAMC NM		; RECEIVE STATUS TABLE MACRO
					RSTA'NM:	.WORD RIBF'NM		; RI.PTR
						.WORD RIBF'NM+RIBFLN		; RI.END
						.WORD RIBF'NM			; RI.BEG
						.WORD RIBF'NM			; RI.LIM
						.WORD MRTY'NM			; RI.FLG
						.WORD ROBF'NM			; RO.PTR
						.WORD ROBF'NM+ROBFLN		; RO.END
						.WORD ROBF'NM			; RO.BEG
						.WORD ROBF'NM			; RO.LIM
						.WORD MRAL'NM			; AL.FLAG
						.BYTE 0,200+NM,0,0		; TTYNUM
						.WORD 0				; RI.BLK
						.WORD 0				; RO.BLK
						.WORD 0				; MR.BLK
						.WORD 0				; CG.BLK
						.WORD 0				; R.FLGS
						.WORD RSTR'NM			; RS.PTR
						.WORD 0				; RS.CNT
						.WORD 0				; RO.ESF
						.WORD -1			; RO.ESC
						.WORD 0				; JMPESC
						.WORD 0				; ROW
						.WORD 0				; COL
					
					.ENDM
					
					
					
					.MACRO	TSTAMC NM		; TRANSMIT STATUS TABLES MACRO
					TSTA'NM:	.WORD TIBF'NM
						.WORD TIBF'NM+TIBFLN
						.WORD TIBF'NM
						.WORD TIBF'NM
						.WORD MTTY'NM
						.WORD TDST0+OD.PTR	;INDIRECT POINTER
						.WORD TDST0+OD.END	;INDIRECT POINTER
						.WORD TDST0+OD.BEG	;INDIRECT POINTER
						.WORD TDST0+OD.LIM	;INDIRECT POINTER
						.WORD MTCG'NM
						.BYTE 0,200+NM,0,0
						.WORD 0
						.WORD TDST0+OD.BLK	;INDIRECT POINTER
						.WORD 0
						.WORD 0
						.WORD 0
						.WORD TSTR'NM
						.WORD 0
					.ENDM
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 19
	GLPT;R11MUX 103	PAGE 1.18 	TABLE AND VARIABLE DEFINITION MACROS

					;  INTERRUPT HANDLER MACROS 
					
					.MACRO INRTMC NM,INRTSB		; TTY RECEIVE INTERRUPT HANDLER
					INRT'NM:	PUSH R3
						MOV #NM*2,R3
						CALL INRTSB
						POP R3
						RTI
					.ENDM
					
					.MACRO INTTMC NM,INTTSB		; TTY TRANSMIT INTERRUPT HANDLER
					INTT'NM:	PUSH R3
						MOV #NM*2,R3
						CALL INTTSB
						POP R3
						RTI
					.ENDM
					
					;  ALLOCATION DATA MACROS 
					
					.MACRO ALCMMC NM		; ALLOCATION MESSAGE MACRO
					ALZM'NM:	.BYTE 200+NM,34	; ^\
							.BYTE 200+NM,32	; ^Z
					ALCM'NM:	.BYTE 200+NM,34	; ^\
							.BYTE 200+NM,1	; ^A
							.BYTE 200+NM,0	; ALLOCATION
					ALCI'NM==.-1
					.ENDM
					
					
					.MACRO MCNTMC NM
					MCNT'NM:	.WORD 3		; MACRO FOR STORAGE OF COUNT OF MESSAGE
					.ENDM
					
					.MACRO ALCPMC NM
					ALCP'NM:	.WORD ALCM'NM	; MACRO FOR STORAGE OF MESSAGE POINTER
					.ENDM
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 20
	GLPT;R11MUX 103	PAGE 1.19 	$$$$$$ INITIALIZATION $$$$$

					.SBTTL $$$$$$ INITIALIZATION $$$$$
					
		002000			.=2000
					
	002000	012767	000340	175770	INIT:	MOV #340,%PS
	002006	000005				RESET
	002010	012706	002000			MOV #INIT,SP			; INITIALIZE STACK
								; INITIALIZE DEVICES
	002014	012701	060412			MOV #TDST0,R1			; DEVICE 0
	002020	012767	003376	001312		MOV #SLRD0,VCRD0		; INTERNAL POINTER IN DEVICE 0
										; RECEIVE INTERRUPT HANDLER
	002026	016161	000004	000000		MOV OD.BEG(R1),OD.PTR(R1)
	002034	016161	000004	000006		MOV OD.BEG(R1),OD.LIM(R1)
	002042	005061	000010			CLR OD.BLK(R1)
	002046	052767	000100	173534		BIS #100,RDST0			; ENABLE DL-11 RECEIVE INTERRUPTS
	002054	042767	000100	173532		BIC #100,XDST0			; DISABLE DL-11 TRANSMIT INTERRUPTS
					
	002062	052767	000100	173530		BIS #100,RTST0			; ENABLE DL-11 RECEIVE INTERRUPTS
	002070	042767	000100	173526		BIC #100,XTST0			; DISABLE DL-11 TRANSMIT INTERRUPTS
					
	002076	052767	000100	175454		BIS #100,RTST1			; ENABLE CONSOLE TTY RECEIVE INTERRUPTS
	002104	042767	000100	175452		BIC #100,XTST1			; DISABLE CONSOLE TTY TRANSMIT INTERRUPTS
					
	002112	042767	000100	175426		BIC #100,%LKS			; TURN OFF LINE CLOCK INTERRUPTS
					
	002120	042767	000100	165642		BIC #100,XTST2			; DISABLE ANN ARBOR CONTROLLER INTERRUPTS
					
	002126	016700	165630		1$:	MOV KEYBUF,R0			; KEYBOARD MULTIPLEXOR
	002132	032700	040000			BIT #40000,R0			; THIS WILL PROBABLY CHANGE
	002136	001373				BNE 1$
	002140	012767	000101	165612		MOV #KEYBDI,KEYSTA
					
								; INTIALIZE ALL TTY CHANNELS
	002146	012703	000006			MOV #<MAXTTY-1>*2,R3
					2$:	CALL INTYSB			; INTYSB VECTORS TO PROPER INIALIZING ROUTINE
	002152	004767	010224			JSR PC,INTYSB
	002156	162703	000002			SUB #2,R3
	002162	100373				BPL 2$
					
	002164	012767	000001	000604		MOV #WAITIN,WAITPL		; FIX WAIT INSTRUCTION
	002172	005067	175600			CLR %PS				; ALLOW INTERRUPTS
	002176	000420				BR TESTLB			; SKIP OVER BRANCH PATCH TABLES
					
		002210			SRTY:	.BLKW MXTTTY
		002220			STTY:	.BLKW MXTTTY
		002230			SRAL:	.BLKW MXTTTY
		002240			STCG:	.BLKW MXTTTY
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 21
	GLPT;R11MUX 103	PAGE 1.20 	INQUIRY LOOP 

					.SBTTL  INQUIRY LOOP 
					
					TESTLB:
		000003			GLDTTY==3				; TTY CHANNEL NUMBER ASSOCIATED WITH GOULD
						RPROC 3,0,MRGLSB,MRALSB			; TTY 26
	002240	000406			MRTY3:	BR MRAL3
	002242	012703	000006			MOV #3*2,R3
						CALL MRGLSB
	002246	004767	004614			JSR PC,MRGLSB
	002252	000167	177762			JMP TESTLB
						SRTYMC 3
		002256			PLAC=.
		002206			.=SRTY+<3*2>
	002206	000406			SRTY3:	BR .+<MRAL3-MRTY3>
		002256			.=PLAC
	002256	000406			MRAL3:	BR MRTY0
	002260	012703	000006			MOV #3*2,R3
						CALL MRALSB
	002264	004767	007570			JSR PC,MRALSB
	002270	000167	177744			JMP TESTLB
						SRALMC 3,0
		002274			PLAC=.
		002226			.=SRAL+<3*2>
	002226	000406			SRAL3:	BR .+<MRTY0-MRAL3>
		002274			.=PLAC
						RPROC 0,1,MRTYSB,MRALSB			; TTY 23
	002274	000406			MRTY0:	BR MRAL0
	002276	012703	000000			MOV #0*2,R3
						CALL MRTYSB
	002302	004767	002716			JSR PC,MRTYSB
	002306	000167	177726			JMP TESTLB
						SRTYMC 0
		002312			PLAC=.
		002200			.=SRTY+<0*2>
	002200	000406			SRTY0:	BR .+<MRAL0-MRTY0>
		002312			.=PLAC
	002312	000406			MRAL0:	BR MRTY1
	002314	012703	000000			MOV #0*2,R3
						CALL MRALSB
	002320	004767	007534			JSR PC,MRALSB
	002324	000167	177710			JMP TESTLB
						SRALMC 0,1
		002330			PLAC=.
		002220			.=SRAL+<0*2>
	002220	000406			SRAL0:	BR .+<MRTY1-MRAL0>
		002330			.=PLAC
						RPROC 1,2,MRTYSB,MRALSB			; TTY 24
	002330	000406			MRTY1:	BR MRAL1
	002332	012703	000002			MOV #1*2,R3
						CALL MRTYSB
	002336	004767	002662			JSR PC,MRTYSB
	002342	000167	177672			JMP TESTLB
						SRTYMC 1
		002346			PLAC=.
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 22
	GLPT;R11MUX 103	PAGE 1.21 	INQUIRY LOOP 

		002202			.=SRTY+<1*2>
	002202	000406			SRTY1:	BR .+<MRAL1-MRTY1>
		002346			.=PLAC
	002346	000406			MRAL1:	BR MRTY2
	002350	012703	000002			MOV #1*2,R3
						CALL MRALSB
	002354	004767	007500			JSR PC,MRALSB
	002360	000167	177654			JMP TESTLB
						SRALMC 1,2
		002364			PLAC=.
		002222			.=SRAL+<1*2>
	002222	000406			SRAL1:	BR .+<MRTY2-MRAL1>
		002364			.=PLAC
		000002			AATYST==2				; START OF ANN ARBOR TERMINALS
						RPROC 2,4,MRTYSB,MRALSB			; TTY 25
	002364	000406			MRTY2:	BR MRAL2
	002366	012703	000004			MOV #2*2,R3
						CALL MRTYSB
	002372	004767	002626			JSR PC,MRTYSB
	002376	000167	177636			JMP TESTLB
						SRTYMC 2
		002402			PLAC=.
		002204			.=SRTY+<2*2>
	002204	000406			SRTY2:	BR .+<MRAL2-MRTY2>
		002402			.=PLAC
	002402	000406			MRAL2:	BR MRTY4
	002404	012703	000004			MOV #2*2,R3
						CALL MRALSB
	002410	004767	007444			JSR PC,MRALSB
	002414	000167	177620			JMP TESTLB
						SRALMC 2,4
		002420			PLAC=.
		002224			.=SRAL+<2*2>
	002224	000406			SRAL2:	BR .+<MRTY4-MRAL2>
		002420			.=PLAC
						RSYM \MXTTTY
					MRTY4:
					
						TPROC 0,1,MTTYSB,MTCGSB			; TTY 23
	002420	000406			MTTY0:	BR MTCG0
	002422	012703	000000			MOV #0*2,R3
						CALL MTTYSB
	002426	004767	003716			JSR PC,MTTYSB
	002432	000167	177602			JMP TESTLB
						STTYMC 0
		002436			PLAC=.
		002210			.=STTY+<0*2>
	002210	000406			STTY0:	BR .+<MTCG0-MTTY0>
		002436			.=PLAC
	002436	000406			MTCG0:	BR MTTY1
	002440	012703	000000			MOV #0*2,R3
						CALL MTCGSB
	002444	004767	007602			JSR PC,MTCGSB
	002450	000167	177564			JMP TESTLB
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 23
	GLPT;R11MUX 103	PAGE 1.22 	INQUIRY LOOP 

						STCGMC 0,1
		002454			PLAC=.
		002230			.=STCG+<0*2>
	002230	000406			STCG0:	BR .+<MTTY1-MTCG0>
		002454			.=PLAC
						TPROC 1,2,MTTYSB,MTCGSB			; TTY 24
	002454	000406			MTTY1:	BR MTCG1
	002456	012703	000002			MOV #1*2,R3
						CALL MTTYSB
	002462	004767	003662			JSR PC,MTTYSB
	002466	000167	177546			JMP TESTLB
						STTYMC 1
		002472			PLAC=.
		002212			.=STTY+<1*2>
	002212	000406			STTY1:	BR .+<MTCG1-MTTY1>
		002472			.=PLAC
	002472	000406			MTCG1:	BR MTTY2
	002474	012703	000002			MOV #1*2,R3
						CALL MTCGSB
	002500	004767	007546			JSR PC,MTCGSB
	002504	000167	177530			JMP TESTLB
						STCGMC 1,2
		002510			PLAC=.
		002232			.=STCG+<1*2>
	002232	000406			STCG1:	BR .+<MTTY2-MTCG1>
		002510			.=PLAC
						TPROC 2,3,MTTYSB,MTCGSB			; TTY 25
	002510	000406			MTTY2:	BR MTCG2
	002512	012703	000004			MOV #2*2,R3
						CALL MTTYSB
	002516	004767	003626			JSR PC,MTTYSB
	002522	000167	177512			JMP TESTLB
						STTYMC 2
		002526			PLAC=.
		002214			.=STTY+<2*2>
	002214	000406			STTY2:	BR .+<MTCG2-MTTY2>
		002526			.=PLAC
	002526	000406			MTCG2:	BR MTTY3
	002530	012703	000004			MOV #2*2,R3
						CALL MTCGSB
	002534	004767	007512			JSR PC,MTCGSB
	002540	000167	177474			JMP TESTLB
						STCGMC 2,3
		002544			PLAC=.
		002234			.=STCG+<2*2>
	002234	000406			STCG2:	BR .+<MTTY3-MTCG2>
		002544			.=PLAC
						TPROC 3,4,MTTYSB,NULLSB			; TTY 26
	002544	000406			MTTY3:	BR MTCG3
	002546	012703	000006			MOV #3*2,R3
						CALL MTTYSB
	002552	004767	003572			JSR PC,MTTYSB
	002556	000167	177456			JMP TESTLB
						STTYMC 3
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 24
	GLPT;R11MUX 103	PAGE 1.23 	INQUIRY LOOP 

		002562			PLAC=.
		002216			.=STTY+<3*2>
	002216	000406			STTY3:	BR .+<MTCG3-MTTY3>
		002562			.=PLAC
	002562	000406			MTCG3:	BR MTTY4
	002564	012703	000006			MOV #3*2,R3
						CALL NULLSB
	002570	004767	007604			JSR PC,NULLSB
	002574	000167	177440			JMP TESTLB
						STCGMC 3,4
		002600			PLAC=.
		002236			.=STCG+<3*2>
	002236	000406			STCG3:	BR .+<MTTY4-MTCG3>
		002600			.=PLAC
						TSYM \MXTTTY
					MTTY4:
					
	002600	000460			STATBR:	BR GLIBR		; MAIN PROGRAM LEVEL STATUS MESSAGE DAEMON
	002602	012703	000006			MOV #GLDTTY*2,R3
	002606	016304	060016			MOV TSTA(R3),R4
	002612	016405	000000			MOV TI.PTR(R4),R5
	002616	016700	056222			MOV STAMSG,R0
	002622	005764	000030		12$:	TST TI.BLK(R4)
	002626	001410				 BEQ 1$
	002630	010067	056210			MOV R0,STAMSG
	002634	010564	000000			MOV R5,TI.PTR(R4)
	002640	105074	000010			CLRB @TI.FLG(R4)
	002644	000167	177370			 JMP TESTLB		; (SINCE CHARACTERS ARE NOT DEPOSITED WITH INTERRUPTS
									; WAITPL HACKERY IS NOT NEEDED)
	002650	012025			1$:	MOV (R0)+,(R5)+
	002652	020564	000002			CMP R5,TI.END(R4)
	002656	001002				 BNE 3$
	002660	016405	000004			 MOV TI.BEG(R4),R5
	002664	020564	000006		3$:	CMP R5,TI.LIM(R4)
	002670	001002				 BNE 4$
	002672	005264	000030			INC TI.BLK(R4)
	002676	005367	056144		4$:	DEC STALEN
	002702	001347				 BNE 12$
	002704	012767	000005	056134		MOV #STLEN,STALEN	; CLEAN UP
	002712	012767	061032	056124		MOV #STMSG,STAMSG
	002720	010564	000000			MOV R5,TI.PTR(R4)
	002724	016767	000054	177646		MOV SSTABR,STATBR
	002732	105074	000010			CLRB @TI.FLG(R4)
	002736	000167	177276			JMP TESTLB
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 25
	GLPT;R11MUX 103	PAGE 1.24 	INQUIRY LOOP 

	002742	000777			GLIBR:	BR GLIBR		; MAIN PROGRAM ACTIVATION OF GOULD
									; (USEFUL ALSO FROM INTERRUPT LEVELS >= 5)
	002744	005767	056054			TST GLERR
	002750	001012				BNE WAITPL		; SKIP IF GOULD ERROR
						MASK 5
						PUSH %PS
					.IRP Y,<%PS>
						MOV Y,-(SP)
					.ENDM
	002752	016746	175020			MOV %PS,-(SP)
	002756	012767	000240	175012		MOV #<5>_5,%PS
						CALL GLDINT
	002764	004767	001406			JSR PC,GLDINT
	002770	016767	000012	177744		MOV SGLIBR,GLIBR	; CLEAN UP AND FALL THROUGH
					
	002776	000001			WAITPL:	WAIT
	003000	000167	177234			JMP TESTLB
					
	003004	000460			SSTABR:	BR .+<GLIBR-STATBR>
	003006	000415			SGLIBR:	BR .+<WAITPL-GLIBR>
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 26
	GLPT;R11MUX 103	PAGE 1.25 	TTY INTERRUPT DISPATCH 

					.SBTTL  TTY INTERRUPT DISPATCH 
					
						INRTMC 0,INRTSB			; IMLAC		STANDARD RECEIVE INTERRUPT
					INRT0:	PUSH R3
					.IRP Y,<R3>
						MOV Y,-(SP)
					.ENDM
	003010	010346				MOV R3,-(SP)
	003012	012703	000000			MOV #0*2,R3
						CALL INRTSB
	003016	004767	000660			JSR PC,INRTSB
						POP R3
					.IRP Y,<R3>
						MOV (SP)+,Y
					.ENDM
	003022	012603				MOV (SP)+,R3
	003024	000002				RTI
						INRTMC 1,INRTSB			; TEKTRONIX	STANDARD RECEIVE INTERRUPT
					INRT1:	PUSH R3
					.IRP Y,<R3>
						MOV Y,-(SP)
					.ENDM
	003026	010346				MOV R3,-(SP)
	003030	012703	000002			MOV #1*2,R3
						CALL INRTSB
	003034	004767	000642			JSR PC,INRTSB
						POP R3
					.IRP Y,<R3>
						MOV (SP)+,Y
					.ENDM
	003040	012603				MOV (SP)+,R3
	003042	000002				RTI
						INRTMC 3,NULLSB			; GOULD		STANDARD RECEIVE INTERRUPT
					INRT3:	PUSH R3
					.IRP Y,<R3>
						MOV Y,-(SP)
					.ENDM
	003044	010346				MOV R3,-(SP)
	003046	012703	000006			MOV #3*2,R3
						CALL NULLSB
	003052	004767	007322			JSR PC,NULLSB
						POP R3
					.IRP Y,<R3>
						MOV (SP)+,Y
					.ENDM
	003056	012603				MOV (SP)+,R3
	003060	000002				RTI
										; DIGIVUE	KEYMUX   RECEIVE INTERRUPT
										; ANN ARBOR #1  KEYMUX   RECEIVE INTERRUPT
										; ANN ARBOR #2  KEYMUX   RECEIVE INTERRUPT
					
					
						INTTMC 0,INTTSB			; IMLAC		STANDARD TRANSMIT INTERRUPT
					INTT0:	PUSH R3
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 27
	GLPT;R11MUX 103	PAGE 1.26 	TTY INTERRUPT DISPATCH 

					.IRP Y,<R3>
						MOV Y,-(SP)
					.ENDM
	003062	010346				MOV R3,-(SP)
	003064	012703	000000			MOV #0*2,R3
						CALL INTTSB
	003070	004767	000760			JSR PC,INTTSB
						POP R3
					.IRP Y,<R3>
						MOV (SP)+,Y
					.ENDM
	003074	012603				MOV (SP)+,R3
	003076	000002				RTI
						INTTMC 1,INTTSB			; TEKTRONIX	STANDARD TRANSMIT INTERRUPT
					INTT1:	PUSH R3
					.IRP Y,<R3>
						MOV Y,-(SP)
					.ENDM
	003100	010346				MOV R3,-(SP)
	003102	012703	000002			MOV #1*2,R3
						CALL INTTSB
	003106	004767	000742			JSR PC,INTTSB
						POP R3
					.IRP Y,<R3>
						MOV (SP)+,Y
					.ENDM
	003112	012603				MOV (SP)+,R3
	003114	000002				RTI
						INTTMC 2,INTTSB			; ANN ARBOR	STANDARD TRANSMIT INTERRUPT
					INTT2:	PUSH R3
					.IRP Y,<R3>
						MOV Y,-(SP)
					.ENDM
	003116	010346				MOV R3,-(SP)
	003120	012703	000004			MOV #2*2,R3
						CALL INTTSB
	003124	004767	000724			JSR PC,INTTSB
						POP R3
					.IRP Y,<R3>
						MOV (SP)+,Y
					.ENDM
	003130	012603				MOV (SP)+,R3
	003132	000002				RTI
						INTTMC 3,NULLSB			; GOULD		STANDARD TRANSMIT INTERRUPT
					INTT3:	PUSH R3
					.IRP Y,<R3>
						MOV Y,-(SP)
					.ENDM
	003134	010346				MOV R3,-(SP)
	003136	012703	000006			MOV #3*2,R3
						CALL NULLSB
	003142	004767	007232			JSR PC,NULLSB
						POP R3
					.IRP Y,<R3>
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 28
	GLPT;R11MUX 103	PAGE 1.27 	TTY INTERRUPT DISPATCH 

						MOV (SP)+,Y
					.ENDM
	003146	012603				MOV (SP)+,R3
	003150	000002				RTI
					
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 29
	GLPT;R11MUX 103	PAGE 1.28 	INTERRUPT HANDLERS 

					.SBTTL  INTERRUPT HANDLERS 
					
					;  FATAL INTERRUPT HANDLER 
					
					CPUERR:
					ILLOPR:
					BPTTRP:
					IOTTRP:
					EMTTRP:
					UUOH:
	003152	000000				HALT
	003154	000167	176620		 	JMP INIT		; SO CONTINUE WILL WORK
					
					;  CLOCK HANDLER 
					
	003160	042767	000200	174360	CLKHND:	BIC #200,%LKS
	003166	005767	055564			TST EODFLG
	003172	001406				BEQ 3$
	003174	005767	055622			TST GLIDL
	003200	001011				BNE 31$
	003202	005067	000104			CLR CLKCNT		; GOULD NOT SETTLED YET
	003206	000002				RTI
					
	003210	042767	000100	174330	3$:	BIC #100,%LKS		; SHOW'S OVER, GO HOME
	003216	005067	000070			CLR CLKCNT
	003222	000002				RTI
					
	003224	005267	000062		31$:	INC CLKCNT		; COUNTDOWN TO INDICATE LOSS OF ENABLE STATUS ON GOULD
	003230	022767	000030	000054		CMP #GLDTIM,CLKCNT	; SHORT TIMEOUT (1/2 SECOND) FOR PAPER SMEAR
	003236	001401				BEQ 2$
	003240	000002				RTI
					
					2$:	PUSH R4
					.IRP Y,<R4>
						MOV Y,-(SP)
					.ENDM
	003242	010446				MOV R4,-(SP)
	003244	016704	055516			MOV GLPTR,R4
	003250	012724	100000			MOV #100000,(R4)+
	003254	016724	000034			MOV SMEARP,(R4)+
	003260	010467	055502			MOV R4,GLPTR
	003264	010467	055500			MOV R4,GTPTR
	003270	105067	177446			CLRB GLIBR
						POP R4
					.IRP Y,<R4>
						MOV (SP)+,Y
					.ENDM
	003274	012604				MOV (SP)+,R4
	003276	005067	000010			CLR CLKCNT
	003302	042767	000100	174236		BIC #100,%LKS
	003310	000002				RTI
					
	003312	000000			CLKCNT:	.WORD 0
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 30
	GLPT;R11MUX 103	PAGE 1.29 	INTERRUPT HANDLERS 

	003314	011744			SMEARP:	.WORD SMRBLK
					
					;  POWER FAIL HANDLER 
					
	003316	012767	003326	174500	POWROF:	MOV #RSTALL,%PWRV
	003324	000000				HALT
					
	003326	012767	003316	174470	RSTALL:	MOV #POWROF,%PWRV
	003334	000167	176440			JMP INIT
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 31
	GLPT;R11MUX 103	PAGE 1.30 	INTERRUPT HANDLERS 

					;  INTERRUPT ROUTINE FOR RECEIVE INPUT FROM PDP-10 VIA DL-11 
					;			DEVICE 0
	003340	003376			VCRD0:	.WORD SLRD0		; VECTOR TO ONE OF THREE ROUTINES:
									;	(LINE SELECT, COUNT, CHARACTER OUT HANDLER)
	003342	000000			CTRT0:	.WORD 0			; COUNT OF CHARACTERS REMAINING FOR THIS LINE
	003344	000000			VCRT0:	.WORD 0			; VECTOR TO TTY STATUS TABLE
					
					INRD0:	PUSH <R0,R1,R2>
					.IRP Y,<R0,R1,R2>
						MOV Y,-(SP)
					.ENDM
	003346	010046				MOV R0,-(SP)
	003350	010146				MOV R1,-(SP)
	003352	010246				MOV R2,-(SP)
	003354	016700	172232			MOV RDBF0,R0		; PICK UP CHARACTER
	003360	100003				BPL 1$
	003362	010067	000006			MOV R0,DLSTA1
	003366	000000				HALT			; BAD CHARACTER
	003370	000177	177744		1$:	JMP @VCRD0
					
	003374	000000			DLSTA1:	.WORD 0
					
	003376	032700	000200		SLRD0:	BIT #200,R0		; SELECT LINE FOR INPUT
	003402	001467				 BEQ IN0XIT		; NO LINE SELECT WHEN EXPECTED, IGNORE IT.
	003404	042700	000200		1$:	BIC #200,R0		; CLEAR OUT LINE SELECT BIT
	003410	020027	000003			CMP R0,#MAXTTY-1
	003414	101401				BLOS 2$
	003416	000000				HALT			; NON-EXISTENT TTY
	003420	006300			2$:	ASL R0			; CONTRUCT INDEX TO PROPER INPUT QUEUE STATUS TABLE
	003422	016067	060006	177714		MOV RSTA(R0),VCRT0
	003430	012767	003446	177702		MOV #CTRD0,VCRD0
						POP <R2,R1,R0>
					.IRP Y,<R2,R1,R0>
						MOV (SP)+,Y
					.ENDM
	003436	012602				MOV (SP)+,R2
	003440	012601				MOV (SP)+,R1
	003442	012600				MOV (SP)+,R0
	003444	000002				RTI
					
	003446	010067	177670		CTRD0:	MOV R0,CTRT0
	003452	001001				BNE 1$
	003454	000000				HALT			; ZERO LENGTH STRING
	003456	012767	003474	177654	1$:	MOV #PTRD0,VCRD0
						POP <R2,R1,R0>
					.IRP Y,<R2,R1,R0>
						MOV (SP)+,Y
					.ENDM
	003464	012602				MOV (SP)+,R2
	003466	012601				MOV (SP)+,R1
	003470	012600				MOV (SP)+,R0
	003472	000002				RTI
					
	003474	016701	177644		PTRD0:	MOV VCRT0,R1		; PLACE CHARACTER INTO INPUT QUEUE
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 32
	GLPT;R11MUX 103	PAGE 1.31 	INTERRUPT HANDLERS 

	003500	016102	000000			MOV RI.PTR(R1),R2
	003504	110022				MOVB R0,(R2)+		; THERE IT GOES ... (PLOP)
	003506	020261	000002			CMP R2,RI.END(R1)
	003512	001002				BNE 1$
	003514	016102	000004			MOV RI.BEG(R1),R2
	003520	020261	000006		1$:	CMP R2,RI.LIM(R1)
	003524	001001				BNE 2$
	003526	000000				HALT			; DATA OVERRUN, SCREWED ALLOCATION
	003530	010261	000000		2$:	MOV R2,RI.PTR(R1)
	003534	005367	177602			DEC CTRT0
	003540	001003				BNE 3$
	003542	012767	003376	177570		MOV #SLRD0,VCRD0
	003550	105071	000010		3$:	CLRB @RI.FLG(R1)		; SIGNAL MAIN PROGRAM THAT A CHARACTER IS READY
	003554	012767	000240	177214		MOV #NOPIN,WAITPL
					IN0XIT:	POP <R2,R1,R0>
					.IRP Y,<R2,R1,R0>
						MOV (SP)+,Y
					.ENDM
	003562	012602				MOV (SP)+,R2
	003564	012601				MOV (SP)+,R1
	003566	012600				MOV (SP)+,R0
	003570	000002				RTI
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 33
	GLPT;R11MUX 103	PAGE 1.32 	INTERRUPT HANDLERS 

					;  INTERRUPT ROUTINE FOR TRANSMIT OUTPUT TO PDP-10 VIA DL-11 
					
					;NOTE: HAVE MTTY'S INDIRECT THROUGH TRANSMIT OUTPUT STATUS TABLE
					; (IMPLIMENTS MANY TO ONE FUNCTION)
					
					INTD0:	PUSH <R0,R1,R2>		; INTERRUPT TRANSMIT DEVICE 0
					.IRP Y,<R0,R1,R2>
						MOV Y,-(SP)
					.ENDM
	003572	010046				MOV R0,-(SP)
	003574	010146				MOV R1,-(SP)
	003576	010246				MOV R2,-(SP)
	003600	012701	060412			MOV #TDST0,R1		; PICK UP POINTER TO STATUS TABLE FOR TRANSMIT DEVICE 0
	003604	016102	000006			MOV OD.LIM(R1),R2	; PICK LOAD POINTER TO CHATACTER DATA
	003610	112200				MOVB (R2)+,R0		; PICK UP CHARACTER
	003612	020261	000002			CMP R2,OD.END(R1)	; ARE WE AT END OF BUFFER
	003616	001002				BNE 1$
	003620	016102	000004			MOV OD.BEG(R1),R2	; THEN CIRCLE AROUND TO THE BEGINNING
					1$:	MASK 7			;	TO MAKE SURE NOTHING CAN CATCH US
						PUSH %PS
					.IRP Y,<%PS>
						MOV Y,-(SP)
					.ENDM
	003624	016746	174146			MOV %PS,-(SP)
	003630	012767	000340	174140		MOV #<7>_5,%PS
									;	DISABLING INTERRUPTS WHILE STUFF PENDING
	003636	020261	000000			CMP R2,OD.PTR(R1)	; HAVE WE CAUGHT UP WITH INSERTION POINTER?
	003642	001003				BNE 2$
	003644	042767	000100	171742		BIC #100,XDST0		; THEN TURN OFF INTERRUPT
					2$:	UNMASK
						POP %PS
					.IRP Y,<%PS>
						MOV (SP)+,Y
					.ENDM
	003652	012667	174120			MOV (SP)+,%PS
	003656	010261	000006			MOV R2,OD.LIM(R1)	; UPDATE POINTER
	003662	010067	171730			MOV R0,XDBF0		; AND PUT OUT CHARACTER
	003666	005061	000010			CLR OD.BLK(R1)
						POP <R2,R1,R0>
					.IRP Y,<R2,R1,R0>
						MOV (SP)+,Y
					.ENDM
	003672	012602				MOV (SP)+,R2
	003674	012601				MOV (SP)+,R1
	003676	012600				MOV (SP)+,R0
	003700	000002				RTI
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 34
	GLPT;R11MUX 103	PAGE 1.33 	INTERRUPT HANDLERS 

					;  INTERRUPT ROUTINE FOR INPUT FROM TTY 
					
					INRTSB:	PUSH R0			; INPUT DEVICE INTERRUPT HANDLER
					.IRP Y,<R0>
						MOV Y,-(SP)
					.ENDM
	003702	010046				MOV R0,-(SP)
	003704	017300	060132			MOV @RTBF(R3),R0	; PICK UP CHARACTER
	003710	100003				 BPL 1$
	003712	010067	000016			MOV R0,DLSTA2		; SAVE BITS FOR A PORT MORTEM
	003716	000404				BR 2$			; SCREWED CHARACTER
	003720	042700	000200		1$:	BIC #200,R0		; GET RID OF THAT 8'TH BIT!
						CALL INRPUT
	003724	004767	000006			JSR PC,INRPUT
					2$:	POP R0
					.IRP Y,<R0>
						MOV (SP)+,Y
					.ENDM
	003730	012600				MOV (SP)+,R0
						RET 
	003732	000207				RTS PC
					
	003734	000000			DLSTA2:	.WORD 0
					
					INRPUT:	PUSH <R1,R2,R5>
					.IRP Y,<R1,R2,R5>
						MOV Y,-(SP)
					.ENDM
	003736	010146				MOV R1,-(SP)
	003740	010246				MOV R2,-(SP)
	003742	010546				MOV R5,-(SP)
	003744	016301	060016			MOV TSTA(R3),R1		; PICK UP POINTER TO TRANSMIT STATUS TABLE 0
	003750	005761	000030			TST TI.BLK(R1)
	003754	001407				 BEQ 2$
	003756	105071	000022			CLRB @CG.FLG(R1)
	003762	016305	060006			MOV RSTA(R3),R5
	003766	005265	000034			INC MR.BLK(R5)
	003772	000421				 BR 5$
	003774	016102	000000		2$:	MOV TI.PTR(R1),R2
	004000	010022				MOV R0,(R2)+
	004002	020261	000002			CMP R2,TI.END(R1)
	004006	001002				 BNE 3$
	004010	016102	000004			MOV TI.BEG(R1),R2
	004014	020261	000006		3$:	CMP R2,TI.LIM(R1)
	004020	001002				BNE 4$
	004022	005261	000030			INC TI.BLK(R1)
	004026	010261	000000		4$:	MOV R2,TI.PTR(R1)
	004032	105071	000010			CLRB @TI.FLG(R1)
	004036	012767	000240	176732	5$:	MOV #NOPIN,WAITPL
						POP <R5,R2,R1>
					.IRP Y,<R5,R2,R1>
						MOV (SP)+,Y
					.ENDM
	004044	012605				MOV (SP)+,R5
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 35
	GLPT;R11MUX 103	PAGE 1.34 	INTERRUPT HANDLERS 

	004046	012602				MOV (SP)+,R2
	004050	012601				MOV (SP)+,R1
						RET
	004052	000207				RTS PC
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 36
	GLPT;R11MUX 103	PAGE 1.35 	INTERRUPT HANDLERS 

					;  INTERRUPT ROUTINE FOR OUTPUT TO TTY 
					
					INTTSB:	PUSH <R1,R2>
					.IRP Y,<R1,R2>
						MOV Y,-(SP)
					.ENDM
	004054	010146				MOV R1,-(SP)
	004056	010246				MOV R2,-(SP)
	004060	016301	060006			MOV RSTA(R3),R1
	004064	016102	000020			MOV RO.LIM(R1),R2
						MASK 7
						PUSH %PS
					.IRP Y,<%PS>
						MOV Y,-(SP)
					.ENDM
	004070	016746	173702			MOV %PS,-(SP)
	004074	012767	000340	173674		MOV #<7>_5,%PS
	004102	005761	000032			TST RO.BLK(R1)
	004106	001011				 BNE 1$
	004110	020261	000012			CMP R2,RO.PTR(R1)
	004114	001006				 BNE 1$
	004116	042773	000100	060136		BIC #100,@XTST(R3)	; NOTHING MORE TO DO SO TURN INTERRUPT ENABLE OFF.
						UNMASK
						POP %PS
					.IRP Y,<%PS>
						MOV (SP)+,Y
					.ENDM
	004124	012667	173646			MOV (SP)+,%PS
	004130	000421				BR 3$
					
					1$:	UNMASK
						POP %PS
					.IRP Y,<%PS>
						MOV (SP)+,Y
					.ENDM
	004132	012667	173640			MOV (SP)+,%PS
	004136	005046				CLR -(SP)		; ALLOCATE A SLOT ON THE PDL
	004140	110366	000001			MOVB R3,1(SP)		; PUT CHANNEL NUMBER IN LH
	004144	112216				MOVB (R2)+,(SP)		; DATA IN RH
	004146	012673	060144			MOV (SP)+,@XTBF(R3)
	004152	020261	000014			CMP R2,RO.END(R1)
	004156	001002				 BNE 2$
	004160	016102	000016			MOV RO.BEG(R1),R2
	004164	010261	000020		2$:	MOV R2,RO.LIM(R1)
	004170	005061	000032			CLR RO.BLK(R1)
					3$:
						POP <R2,R1>
					.IRP Y,<R2,R1>
						MOV (SP)+,Y
					.ENDM
	004174	012602				MOV (SP)+,R2
	004176	012601				MOV (SP)+,R1
						RET
	004200	000207				RTS PC
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 37
	GLPT;R11MUX 103	PAGE 1.36 	INTERRUPT HANDLERS 

					;  KEYBOARD MULTIPLEXER INTERRUPT ROUTINE 
					; CURRENTLY THE LINE ADDRESS IS THE LOW 3 BITS OF THE LEFT BYTE.
					; EVENTUALLY IT IS INTENDED TO HAVE THE LINE ADDRESS BE IN THE SECOND DR11-L INPUT
					; WORD AND A FULL 16-BITS OF DATA IN THE FIRST WORD.  A STATUS BIT OR ADDITIONALL
					; DATA BITS IN THE LH OF WORD 2 WILL INDICATE WHETHER THE KEYBOARD IS THE SOURCE OF
					; THE DATA OR NOT.
	004202	000000			KEYSAV:	0
					
					KEYINT:	PUSH <R0,R3,KEYBUF>		; PICK UP THE DATA
					.IRP Y,<R0,R3,KEYBUF>
						MOV Y,-(SP)
					.ENDM
	004204	010046				MOV R0,-(SP)
	004206	010346				MOV R3,-(SP)
	004210	016746	163546			MOV KEYBUF,-(SP)
					
					; NEXT 4 INSTR WILL EVENTUALLY BE: MOVB KEYADR,R3
	004214	116603	000001			MOVB 1(SP),R3		; FIND TERMINAL ID FROM KEYBOARD ID
	004220	042703	177774			BIC #MAXMUX,R3		; GET KEYBOARD ID
	004224	006303				ASL R3
					
	004226	016303	004346			MOV KEYTAB(R3),R3	; FIND TTY LINE ASSOCIATED WITH THIS KBD
					; FOR NOW ASSUME ALL LINES ARE KBD'S. LATER CHECK
	004232	032716	040000			BIT #INVBIT,(SP)		; PROTECT AGAINST N KEY LOSSAGE
	004236	001006				 BNE 1$
	004240	011667	177736			MOV (SP),KEYSAV		; FOR DEBUGGING
						POP <R0,R3,R0>
					.IRP Y,<R0,R3,R0>
						MOV (SP)+,Y
					.ENDM
	004244	012600				MOV (SP)+,R0
	004246	012603				MOV (SP)+,R3
	004250	012600				MOV (SP)+,R0
	004252	000002				RTI
	004254	111600			1$:	MOVB (SP),R0
	004256	042700	177400			BIC #MBYTE,R0		; FLUSH SIGN EXTENSION
	004262	116016	013216			MOVB AIKTAB(R0),(SP)	; CONVERT KEY CODE BY TABLE LOOKUP
					
					; THIS CODE WILL BE UNNECESSARY WHEN THE MUX IS FIXED
	004266	116600	000001			MOVB 1(SP),R0		; NOW SET UP SPECIAL BITS
	004272	006200				ASR R0
	004274	006200				ASR R0
	004276	006200				ASR R0
	004300	042700	177774			BIC #177774,R0
	004304	032716	020000			BIT #20000,(SP)
	004310	001402				 BEQ 2$
	004312	052700	000010			BIS #10,R0
	004316	110066	000001		2$:	MOVB R0,1(SP)
						POP R0
					.IRP Y,<R0>
						MOV (SP)+,Y
					.ENDM
	004322	012600				MOV (SP)+,R0
						CALL INRPUT
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 38
	GLPT;R11MUX 103	PAGE 1.37 	INTERRUPT HANDLERS 

	004324	004767	177406			JSR PC,INRPUT
						POP <R3,R0>
					.IRP Y,<R3,R0>
						MOV (SP)+,Y
					.ENDM
	004330	012603				MOV (SP)+,R3
	004332	012600				MOV (SP)+,R0
	004334	032767	000200	163416		BIT #200,KEYSTA
	004342	001320				 BNE KEYINT
	004344	000002				RTI
					
					; KEYBOARD VECTOR TABLE ( EACH ENTRY CONTAINS <TTY_CHANNEL_NUMBER>*2)
					
					; KEYBOARD 0 -> ANN ARBOR (TTY 1)
					; KEYBOARD 1 -> PLASMA DISPLAY (TTY 4)
					; KEYBOARD 2 -> TEKTRONIX ALTERNATE (TTY 2)
					; KEYBOARD 3 -> (TTY 5)
					
	004346	000000			KEYTAB:	.WORD 0
	004350	000002				.WORD 2
	004352	000004				.WORD 4
	004354	000004				.WORD 4
	004356	000004				.WORD 4
	004360	000004				.WORD 4
	004362	000004				.WORD 4
	004364	000004				.WORD 4
		004376				.BLKW 4	; LEAVE SPACE FOR TOTAL OF 8 ENTRIES
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 39
	GLPT;R11MUX 103	PAGE 1.38 	INTERRUPT HANDLERS 

					;  GOULD INTERRUPT HANDLER 
					
					GLDINT:	PUSH <R0,R4,R5>
					.IRP Y,<R0,R4,R5>
						MOV Y,-(SP)
					.ENDM
	004376	010046				MOV R0,-(SP)
	004400	010446				MOV R4,-(SP)
	004402	010546				MOV R5,-(SP)
	004404	016704	054370			MOV GTLIM,R4
	004410	005767	054410		GLDERR:	TST GLERR		; ARE WE ALREADY IN AN ERROR STATE?
	004414	001017				BNE 2$
	004416	032767	040400	161354		BIT #%GSERR,GLDCSR	; SHOULD WE GO TO AN ERROR STATE?
	004424	001423				BEQ 1$
					
	004426	116767	161347	054402		MOVB GLDCSR+1,STAERR		; YEP
	004434	005267	054364			INC GLERR		; INFORM WORLD THAT GOULD IS IN TROUBLE
	004440	005267	054362			INC PAGMNG		; COUNT OF PAGE MUNGING INCIDENTS
									; FOR END OF GOULD ERROR MONITOR
	004444	105067	176130			CLRB STATBR		; TELL UNSPOOLR WHAT HAPPENED
	004450	000167	000526			JMP GLIXIT
					
	004454	032767	040400	161316	2$:	BIT #%GSERR,GLDCSR	; IS AN ERROR STILL PRESENT?
	004462	001402				BEQ 3$
	004464	000167	000512			 JMP GLIXIT		; YEP
					
	004470	005067	054330		3$:	CLR GLERR		; NOPE, CLEAN UP
								; WE ARE ASSUMING THAT SELECTION IS PRESERVED WHEN SYSTEM
								; RESET IS ACHIEVED FOLLOWING MANUAL ERROR CORRECTION
								; (HOPEFULLY, THIS OCCURS WHEN THE PRINTER IS BROUGHT ON LINE)
					
	004474	000177	054304		1$:	JMP @GLIPTR
					
	004500	005767	054302		CMIDEC:	TST JMPFLG		; IF IN MIDDLE OF JUMP MACRO, SHOULD NOT
									; TEST FOR BUFFER LIMITS OR COMMAND COMPLETION
	004504	001023				 BNE 112$
	004506	020467	054260			CMP R4,GLEND		; ARE WE EQUAL TO OR GREATER THAN THE END OF
									; THE FIRST BUFFER LIMIT?
	004512	103402				BLO 111$
	004514	016704	054254			MOV GLBEG,R4		; THEN CIRCLE AROUND TO BEGINNING
	004520	005767	054264		111$:	TST REPFLG		; IF IN REPEAT, SHOULD NOT TEST COMMAND COMPLETION
	004524	001004				 BNE 1$
	004526	010467	054244			MOV R4,GLLIM		; SUCCESSFUL COMPLETION OF A FULL COMMAND,
									; UPDATE POINTER THAT MAIN PROGRAM LOOKS AT
					
	004532	005067	054244			CLR GLBLK		; IN CASE M.P. IS HUNG FOR LACK OF SPACE
					
	004536	020467	054224		1$:	CMP R4,GLPTR		; NOTHING LEFT TO DO?
	004542	001004				BNE 112$
	004544	005267	054252			INC GLIDL		; COMPLAIN TO WORLD
	004550	000167	000426			JMP GLIXIT
					
	004554	032767	020000	161216	112$:	BIT #%GSPAP,GLDCSR	; IS GOULD RUNNING LOW ON PAPER?
	004562	001405				BEQ 11$
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 40
	GLPT;R11MUX 103	PAGE 1.39 	INTERRUPT HANDLERS 

	004564	116767	161211	054244		MOVB GLDCSR+1,STAERR		; YEP
	004572	105067	176002			CLRB STATBR		; TELL UNSPOOLER WHAT IS ABOUT TO HAPPEN
					
	004576	005067	054220		11$:	CLR GLIDL		; WE GOT SOMETHING TO DO
	004602	012400				MOV (R4)+,R0
	004604	100456				BMI 2$			; BRANCH IF INTERNAL MACRO COMMAND
					
	004606	020027	000005		14$:	CMP R0,#5		; IF LAST LINE FLAG, DON'T WANT TO WAIT FOR SBUSY
	004612	001404				BEQ 15$
					
					
	004614	032767	004000	161156		BIT #%GSBSY,GLDCSR
	004622	001036				BNE 12$			; BRANCH IF BUSY
	004624	000300			15$:	SWAB R0
	004626	105700				TSTB R0			; TEST FOR DELAYED COMMAND
	004630	001024				BNE 4$
					
					; IMMEDIATE GOULD COMMAND
	004632	000300				SWAB R0
	004634	032700	000170			BIT #170,R0		; THE FOUR UNUSED BITS IN THE GOULD
									; COMMAND BYTE
	004640	001411				 BEQ 115$
	004642	012705	011644			MOV #PAGLST,R5		; REQUEST FOR TAILSHEET PAGE MUNGING STATUS
	004646	016700	054154			MOV PAGMNG,R0
						CALL CHRNUM
	004652	004767	005110			JSR PC,CHRNUM
	004656	005067	054144			CLR PAGMNG		; RESET FOR NEXT FILE
	004662	000402				 BR 116$
	004664	110067	161110		115$:	MOVB R0,GLDCSR
	004670	012767	004500	054106	116$:	MOV #CMIDEC,GLIPTR
	004676	000167	177576			 JMP CMIDEC
					
					; DELAYED GOULD COMMAND
	004702	000300			4$:	SWAB R0
	004704	110067	161070			MOVB R0,GLDCSR
	004710	012767	004500	054066		MOV #CMIDEC,GLIPTR
	004716	000531				BR GLIXIT	
					
	004720	010067	054066		12$:	MOV R0,PNDR0
	004724	012767	004734	054052		MOV #13$,GLIPTR
	004732	000523				 BR GLIXIT
						
	004734	016700	054052		13$:	MOV PNDR0,R0
	004740	000722				BR 14$
					
					
					2$:
					; MOBY COMMAND
	004742	032700	017400			BIT #17400,R0
	004746	001061				BNE 5$			; DMA COMMAND
	004750	032700	040000			BIT #40000,R0		; REPEAT COMMAND
	004754	001024				BNE 3$
	004756	032700	020000			BIT #20000,R0		; CURRENT PAGE COMMAND
	004762	001047				BNE 6$
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 41
	GLPT;R11MUX 103	PAGE 1.40 	INTERRUPT HANDLERS 

					
					
					; JMP COMING UP
	004764	032700	000001			BIT #1,R0
	004770	001406				BEQ 21$
					
					; POP
	004772	016704	054016			MOV JMPRET,R4
	004776	005067	054004			CLR JMPFLG
	005002	000167	177472			 JMP CMIDEC
					
					;PUSH
	005006	012400			21$:	MOV (R4)+,R0		; PUT JUMP ADDRESS INTO R0
	005010	010467	054000			MOV R4,JMPRET		; JMPRET IS ADDRESS AFTER JUMP COMMAND
	005014	005267	053766			INC JMPFLG
	005020	010004				MOV R0,R4
	005022	000167	177452			 JMP CMIDEC
					
					3$:
					; REPEAT COMING UP
	005026	032700	000001			BIT #1,R0
	005032	001413				BEQ 31$
					
					; POP
	005034	005367	053760			DEC REPCNT
	005040	001004				 BNE 32$
	005042	005067	053742			CLR REPFLG
	005046	000167	177426			 JMP CMIDEC		; R4 IS LEFT POINT TO INSTRUCTION AFTER REPEAT LOOP
					
					32$:
					; ITERATE
	005052	016704	053740			MOV REPRET,R4
	005056	000167	177416			 JMP CMIDEC
					
					
					
					;PUSH
	005062	012467	053732		31$:	MOV (R4)+,REPCNT	; REPEAT COUNT GOES INTO R0
	005066	010467	053724			MOV R4,REPRET		; REPRET IS THE ADDRESS OF BEGINNING OF LOOP
	005072	005267	053712			INC REPFLG
	005076	000167	177376			 JMP CMIDEC
					
					6$:
					; CURRENT PAGE COMMAND COMING UP
	005102	110067	053726			MOVB R0,STAPAG
	005106	000167	177366			 JMP CMIDEC
					
					5$:
					; DMA COMMAND COMMING UP
	005112	032767	002000	160660		BIT #%GSDON,GLDCSR
	005120	001424				 BEQ 51$
	005122	010067	160654			MOV R0,GLDWC		; COUNT
	005126	010467	160652			MOV R4,GLDCA		; ADDRESS
	005132	005400				NEG R0
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 42
	GLPT;R11MUX 103	PAGE 1.41 	INTERRUPT HANDLERS 

	005134	006300				ASL R0
	005136	060004				ADD R0,R4
					
	005140	032767	002000	160632	53$:	BIT #%GSDON,GLDCSR
	005146	001405				 BEQ 52$
	005150	012767	004500	053626		MOV #CMIDEC,GLIPTR
	005156	000167	177316			 JMP CMIDEC
					
	005162	012767	005140	053614	52$:	MOV #53$,GLIPTR
	005170	000404				 BR GLIXIT
					
	005172	012767	005112	053604	51$:	MOV #5$,GLIPTR
	005200	000400				 BR GLIXIT
					
	005202	010467	053572		GLIXIT:	MOV R4,GTLIM
					
						POP <R5,R4,R0>
					.IRP Y,<R5,R4,R0>
						MOV (SP)+,Y
					.ENDM
	005206	012605				MOV (SP)+,R5
	005210	012604				MOV (SP)+,R4
	005212	012600				MOV (SP)+,R0
	005214	000002				RTI
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 43
	GLPT;R11MUX 103	PAGE 1.42 	INTERRUPT HANDLERS 

					; INTERRUPT ROUTINES NOT YET DEFINED
					
	005216	000002			PLPINT:	RTI		; PLASMA DISPLAY
					
	005220	000002			IMLINT:	RTI		; IMLAC
					
	005222	000002			NULL:	RTI		; DUMMY
					
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 44
	GLPT;R11MUX 103	PAGE 1.43 	MAIN PROGRAM QUEUE PROCESSING ROUTINES

					.SBTTL MAIN PROGRAM QUEUE PROCESSING ROUTINES
					;  MAIN PROGRAM ROUTINE FOR RECEIVED CHARACTER PROCESSING 
					
	005224	016301	060006		MRTYSB:	MOV RSTA(R3),R1		; CREATE POINTER TO RECEIVE STATUS BLOCK
	005230	005761	000032			TST RO.BLK(R1)
	005234	001003				 BNE 3$
	005236	005761	000034			TST MR.BLK(R1)
	005242	001403				 BEQ 4$
	005244	062716	000004		3$:	ADD #4,(SP)
						RET
	005250	000207				RTS PC
					
	005252	005761	000044		4$:	TST RS.CNT(R1)		; CHECK FOR BUFFERED CHARS
	005256	001414				 BEQ RCHGET
					
	005260	117100	000042		RTSTRH:	MOVB @RS.PTR(R1),R0
	005264	005361	000044			DEC RS.CNT(R1)
	005270	001004				 BNE 1$
	005272	016361	060026	000042		MOV RSTR(R3),RS.PTR(R1)
	005300	000464				BR RCHPUT
	005302	005261	000042		1$:	INC RS.PTR(R1)
	005306	000461				BR RCHPUT
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 45
	GLPT;R11MUX 103	PAGE 1.44 	MAIN PROGRAM QUEUE PROCESSING ROUTINES

					
	005310	016102	000006		RCHGET:	MOV RI.LIM(R1),R2
	005314	112200				MOVB (R2)+,R0		; PICK UP CHARACTER
	005316	020261	000002			CMP R2,RI.END(R1)	; ARE WE AT THE END OF THE BUFFER?
	005322	001002				 BNE 1$
	005324	016102	000004			MOV RI.BEG(R1),R2	; CIRCLE AROUND TO BEGINNING THEN
	005330	010261	000006		1$:	MOV R2,RI.LIM(R1)	; UPDATE POINTER
					
	005334	005363	060152			DEC ALNUM(R3)		; UPDATE ALLOCATION
	005340	003002				 BGT 2$
	005342	000167	174432			JMP INIT			; ALLOCATION SCREWED
	005346	026327	060152	000137	2$:	CMP ALNUM(R3),#ALCLIM	; NEED TO ALLOCATE CHARACTERS?
	005354	002002				 BGE 20$
						CALL ALLCSB		; CALL ALLOCATION SUBROUTINE
	005356	004767	005272			JSR PC,ALLCSB
					
	005362	005761	000046		20$:	TST RO.ESF(R1)		; WAITING FOR AN ESCAPE CHAR?
	005366	001412				 BEQ 3$			; NOPE
	005370	005761	000052			TST JMPESC(R1)		; WAITING FOR CURSOR POSITION ESCAPE?
	005374	001402				 BEQ 21$
	005376	000171	000052			JMP @JMPESC(R1)
					
	005402	042700	177740		21$:	BIC #MASK37,R0		; GET THE ESSENTIALS OF THE CODE
	005406	006300				ASL R0			; DONT NEED R0 ANYMORE.
	005410	000170	060444			JMP @VT52TB(R0)
					
	005414	020061	000050		3$:	CMP R0,RO.ESC(R1)	; ESCAPE CHAR?
	005420	001003				 BNE 31$
	005422	005261	000046			INC RO.ESF(R1)		; JUST SET A FLAG.  DON'T STUFF CHAR.
	005426	000426				BR MORECK
					
	005430	022700	000040		31$:	CMP #40,R0		; CONTROL CHAR?
	005434	003404				 BLE 32$
	005436	010002				MOV R0,R2		; SAVE R0 FOR USE UPON RETURN FROM CONTROL CHAR ROUTINES
	005440	006302				ASL R2
	005442	000172	060532			JMP @AACTLT(R2)
					
	005446	005261	000056		32$:	INC COL(R1)		; ORDINARY CHARS COME HERE.
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 46
	GLPT;R11MUX 103	PAGE 1.45 	MAIN PROGRAM QUEUE PROCESSING ROUTINES

					
	005452	016102	000012		RCHPUT:	MOV RO.PTR(R1),R2
	005456	110022				MOVB R0,(R2)+		; PUT THE CHAR INTO THE RECEIVE OUTPUT BUFFER
	005460	020261	000014			CMP R2,RO.END(R1)	; ARE WE AT THE END OF THE BUFFER?
	005464	001002				 BNE 1$
	005466	016102	000016			MOV RO.BEG(R1),R2	; CIRCLE AROUND TO BEGINNING THEN
	005472	020261	000020		1$:	CMP R2,RO.LIM(R1)	; FROM HERE ON, THERE SHOULD BE SOME OUTPUT TO GO OUT
	005476	001002				 BNE MORECK
	005500	005261	000032			INC RO.BLK(R1)		; BLOCK QUEUE
					
					MORECK:	MASK 7			; DONT ALLOW TRANSMIT INTERRUPTS NOW
						PUSH %PS
					.IRP Y,<%PS>
						MOV Y,-(SP)
					.ENDM
	005504	016746	172266			MOV %PS,-(SP)
	005510	012767	000340	172260		MOV #<7>_5,%PS
	005516	005761	000044			TST RS.CNT(R1)
	005522	001007				 BNE 1$			; MORE CHARS LEFT IN THE STRING BUFFER.
	005524	026161	000006	000000		CMP RI.LIM(R1),RI.PTR(R1)
	005532	001003				 BNE 1$			; STILL HAVE CHARS WAITING TO BE PROCESSED
	005534	016373	002200	060046		MOV SRTY(R3),@MRTY(R3)	; NO CHARS PENDING PATCH UP BRANCH INSTRUCTION
	005542	005761	000046		1$:	TST RO.ESF(R1)
	005546	001016				 BNE 3$			; JUST WAITING FOR MORE CHARS.  NO OUTPUT YET.
	005550	010261	000012			MOV R2,RO.PTR(R1)	; UPDATE POINTER
	005554	012767	000001	175214		MOV #WAITIN,WAITPL	; PATCH WAIT INSTRUCTION
	005562	032773	000100	060136		BIT #100,@XTST(R3)	; INTERRUPTS ENABLED?
	005570	001005				 BNE 3$			; YES
						CALL INTTSB		; NO, GET THE BALL ROLLING
	005572	004767	176256			JSR PC,INTTSB
	005576	052773	000100	060136		BIS #100,@XTST(R3)	; ACTIVATE INTERRUPT FOR OUTPUT TO DEVICE
					3$:	UNMASK			; INTERRUPTS CAN HAPPEN NOW.
						POP %PS
					.IRP Y,<%PS>
						MOV (SP)+,Y
					.ENDM
	005604	012667	172166			MOV (SP)+,%PS
						RET
	005610	000207				RTS PC
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 47
	GLPT;R11MUX 103	PAGE 1.46 	MAIN PROGRAM QUEUE PROCESSING ROUTINES

					; ANN ARBOR ESCAPE HANDLERS
	005612	005000			AANOOP:	CLR R0
	005614	000432				BR AACPUT
					
	005616	012700	000016		AAMVUP:	MOV #16,R0		; MOVE UP
	005622	005361	000054			DEC ROW(R1)
	005626	000425				BR AACPUT
					
	005630	012700	000012		AAMVDN:	MOV #12,R0		; MOVE DOWN
	005634	005261	000054			INC ROW(R1)
	005640	000420				BR AACPUT
					
	005642	012700	000011		AAMVRT:	MOV #11,R0		; MOVE RIGHT
	005646	005261	000056			INC COL(R1)
	005652	000413				BR AACPUT
					
	005654	012700	000010		AAMVLF:	MOV #10,R0		; MOVE LEFT
	005660	005361	000056			DEC COL(R1)
	005664	000406				BR AACPUT
					
	005666	012700	000013		AAHOME:	MOV #13,R0		;  HOME UP
	005672	005061	000054			CLR ROW(R1)
	005676	005061	000056			CLR COL(R1)
					;	BR AACPUT
					
	005702	005061	000046		AACPUT:	CLR RO.ESF(R1)
	005706	000167	177540			JMP RCHPUT
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 48
	GLPT;R11MUX 103	PAGE 1.47 	MAIN PROGRAM QUEUE PROCESSING ROUTINES

	005712	016104	000042		AAEOL:	MOV RS.PTR(R1),R4	; CLEAR TO END OF LINE
						CALL CPOSDO
	005716	004767	000222			JSR PC,CPOSDO
	005722	012702	000120			MOV #80.,R2
	005726	166102	000056			SUB COL(R1),R2
						CALL EOLDO
	005732	004767	000100			JSR PC,EOLDO
	005736	000431				BR AADONE
					
	005740	005761	000054		AAEOS:	TST ROW(R1)		; CLEAR TO END OF SCREEN
	005744	001006				 BNE 1$
	005746	005761	000056			TST COL(R1)
	005752	001003				 BNE 1$
	005754	012700	000014			MOV #14,R0
	005760	000750				BR AACPUT
					
	005762	016104	000042		1$:	MOV RS.PTR(R1),R4
	005766	012705	000030			MOV #24.,R5
	005772	166105	000054			SUB ROW(R1),R5
	005776	012702	000120			MOV #80.,R2
	006002	166102	000056			SUB COL(R1),R2
					
					2$:	CALL EOLDO
	006006	004767	000024			JSR PC,EOLDO
	006012	012702	000120			MOV #80.,R2		; ASSUME WRAPAROUND TO NEXT LINE HAS HAPPENED 
	006016	005305				DEC R5
	006020	003372				 BGT 2$
					
					AADONE:	CALL CPOSDO		; RESTORE THE CURSOR POSITION
	006022	004767	000116			JSR PC,CPOSDO
	006026	005061	000046			CLR RO.ESF(R1)
	006032	000167	177222			JMP RTSTRH
					
	006036	060261	000044		EOLDO:	ADD R2,RS.CNT(R1)
	006042	112724	000040		1$:	MOVB #40,(R4)+			; SPACE
	006046	005302				DEC R2
	006050	003374				 BGT 1$
						RET
	006052	000207				RTS PC
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 49
	GLPT;R11MUX 103	PAGE 1.48 	MAIN PROGRAM QUEUE PROCESSING ROUTINES

					
	006054	012761	006066	000052	AAPOS:	MOV #AAPOS1,JMPESC(R1)		; ABSOLUTE CURSOR POSITION
	006062	000167	177416			JMP MORECK				; ALL WE GOT SO FAR IS $Y
					
	006066	162700	000040		AAPOS1:	SUB #40,R0			; GOT THE ROW
	006072	010061	000054			MOV R0,ROW(R1)
	006076	012761	006110	000052		MOV #AAPOS2,JMPESC(R1)		; WAIT FOR THE COLUMN
	006104	000167	177374			JMP MORECK
					
	006110	162700	000040		AAPOS2: SUB #40,R0			; GOT THE COLUMN
	006114	010061	000056			MOV R0,COL(R1)
	006120	016104	000042			MOV RS.PTR(R1),R4
						CALL CPOSDO
	006124	004767	000014			JSR PC,CPOSDO
	006130	005061	000052			CLR JMPESC(R1)
	006134	005061	000046			CLR RO.ESF(R1)
	006140	000167	177114			JMP RTSTRH
					
	006144	112724	000017		CPOSDO:	MOVB #%AAPOS,(R4)+		; PUT THE CURSOR POS COMMAND CODE
	006150	016100	000056			MOV COL(R1),R0			; FORMAT THE COLUMN
	006154	005005				CLR R5
	006156	162700	000012		1$:	SUB #10.,R0			; DIVIDE BY 10 (DAMN BCD FORMAT!!)
	006162	002402				BLT 2$
	006164	005205				INC R5
	006166	000773				BR 1$
	006170	062700	000012		2$:	ADD #10.,R0			; R0 HAS REMAINDER, R5 THE QUOTIENT
		000004				.REPT 4				; SHIFT LEFT 4 BITS TO GET BCD
						ASL R5
						.ENDR
	006174	006305				ASL R5
	006176	006305				ASL R5
	006200	006305				ASL R5
	006202	006305				ASL R5
	006204	060500				ADD R5,R0
	006206	110024				MOVB R0,(R4)+
	006210	016100	000054			MOV ROW(R1),R0			; FORMAT THE ROW
	006214	052700	000100			BIS #100,R0
	006220	110024				MOVB R0,(R4)+
	006222	062761	000003	000044		ADD #3,RS.CNT(R1)
						RET				; SOMEONE ELSE RESTORES RS.PTR
	006230	000207				RTS PC
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 50
	GLPT;R11MUX 103	PAGE 1.49 	MAIN PROGRAM QUEUE PROCESSING ROUTINES

					
					; CONTROL CHAR ROUTINES
	006232	000444			AACTRL:	BR AACXIT
					
	006234	000443			AABELL:	BR AACXIT
					
	006236	005361	000056		AABS:	DEC COL(R1)
	006242	000440				BR AACXIT
					
	006244	062761	000010	000056	AATAB:	ADD #8.,COL(R1)
	006252	042761	000007	000056		BIC #7,COL(R1)
	006260	022761	000117	000056		CMP #79.,COL(R1)
	006266	002003				 BGE 1$
	006270	012761	000117	000056		MOV #79.,COL(R1)
	006276	016104	000042		1$:	MOV RS.PTR(R1),R4
						CALL CPOSDO
	006302	004767	177636			JSR PC,CPOSDO
					;	MOV RSTR(R3),RS.PTR(R1)
	006306	000167	176746			JMP RTSTRH
					
	006312	005261	000054		AALF:	INC ROW(R1)
	006316	000412				BR AACXIT
					
	006320	005361	000054		AAVT:	DEC ROW(R1)
	006324	000407				BR AACXIT
					
	006326	005061	000054		AAFF:	CLR ROW(R1)
	006332	005061	000056			CLR COL(R1)
	006336	000402				BR AACXIT
					
	006340	005061	000056		AACR:	CLR COL(R1)
					;	BR AACXIT
					
	006344	000167	177102		AACXIT:	JMP RCHPUT
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 51
	GLPT;R11MUX 103	PAGE 1.50 	MAIN PROGRAM QUEUE PROCESSING ROUTINES

					;  MAIN PROGRAM ROUTINE FOR TRANSMITED CHARACTER PROCESSING 
					
	006350	016301	060016		MTTYSB:	MOV TSTA(R3),R1
	006354	005761	000034			TST MT.BLK(R1)
	006360	001003				 BNE 1$
	006362	005771	000032			TST @TO.BLK(R1)		; IS OUTPUT BLOCKED
	006366	001403				 BEQ 2$
	006370	062716	000004		1$:	ADD #4,(SP)		; YEP, PRETEND NOTHING HAPPENED
						RET
	006374	000207				RTS PC
	006376	005761	000044		2$:	TST TS.CNT(R1)
	006402	001417				 BEQ TCHGET
					
					; TEMPORARY STRING HANDLER
	006404	017100	000042		TTSTRH:	MOV @TS.PTR(R1),R0
	006410	005361	000044			DEC TS.CNT(R1)
	006414	001006				 BNE 1$
	006416	016361	060036	000042		MOV TSTR(R3),TS.PTR(R1)
	006424	005061	000036			CLR AL.BLK(R1)
	006430	000511				BR TCHPUT
	006432	062761	000002	000042	1$:	ADD #2,TS.PTR(R1)
	006440	000505				BR TCHPUT
					
					; CURRENT FORMAT OF CHARACTER DATA WORD (WILL BE CHANGED FOR NEW INPUT MUXER
					; AND DMA IMLAC INTERFACE).
					; %MXDAT=100000		THIS DATA CAME FROM THE INPUT MULTIPLEXOR
					; MASCII=177600		ASCII PART OF THE DATA
					; %SPKEY=200		SPECIAL KEY
					; %SBITS=MASK37		SPECIAL BITS
					; %SHLOK=10		SHIFT LOCK (INPUT)
					; IN THE INPUT WORD, THE BITS BELOW ARE LSH'D 1 (SO THEY ALL APPEAR IN THE HIGH BYTE)
					; IN THE OUTPUT SEQUENCE, THE LEFT BYTE HAS 100 ADDED TO IT.
					; %TXTOP=4000		TOP BIT
					; %TXSFL=2000		SHIFT LOCK
					; %TXSHT=1000		SHIFT
					; %TXMTA=400		META
					; %TXCTL=200		CONTROL
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 52
	GLPT;R11MUX 103	PAGE 1.51 	MAIN PROGRAM QUEUE PROCESSING ROUTINES

	006442	016102	000006		TCHGET:	MOV TI.LIM(R1),R2
	006446	012200				MOV (R2)+,R0
	006450	020261	000002			CMP R2,TI.END(R1)
	006454	001002				 BNE 1$
	006456	016102	000004			MOV TI.BEG(R1),R2
	006462	010261	000006		1$:	MOV R2,TI.LIM(R1)
					
	006466	032700	000200			BIT #%SPKEY,R0		; CHECK FOR SPECIAL CODES (> 177)
	006472	001405				 BEQ 2$
	006474	042700	177740			BIC #MASK37,R0		; GET THE ESSENTIAL BITS
	006500	006300				ASL R0
	006502	000170	060632			JMP @SKEYTB(R0)		; GO DO SOMETHING SPECIAL
					
	006506	020027	000034		2$:	CMP R0,#CBSL		; CNTL BACKSLASH?
	006512	001012				 BNE 3$
	006514	016102	000042			MOV TS.PTR(R1),R2
	006520	010022				MOV R0,(R2)+		; QUOTE IT
	006522	010022				MOV R0,(R2)+
	006524	012761	000002	000044		MOV #2,TS.CNT(R1)
					;	MOV TSTR(R3),TS.PTR(R1)
	006532	005261	000036			INC AL.BLK(R1)
	006536	000722				BR TTSTRH
					
	006540	010002			3$:	MOV R0,R2
	006542	000302				SWAB R2
	006544	042702	177740			BIC #%SBITS,R2		; ANY META, CNTL, TOP, ETC. STUFF?
	006550	001441				 BEQ TCHPUT		; NO
	006552	052702	000100			BIS #100,R2
						PUSH R2			; CONSTRUCT TEMPORARY CHARACTER STRING FOR SPECIAL
					.IRP Y,<R2>
						MOV Y,-(SP)
					.ENDM
	006556	010246				MOV R2,-(SP)
	006560	042700	177600			BIC #MASCII,R0
	006564	032702	000010			BIT #%SHLOK,R2		; SHIFT LOCK HACKERY
	006570	001415				 BEQ 4$
	006572	032700	000100			BIT #100,R0		; TEST FOR ALPHABETIC CHARS
	006576	001412				 BEQ 4$
	006600	010002				MOV R0,R2
	006602	042702	177740			BIC #MASK37,R2
	006606	001406				 BEQ 4$
	006610	022702	000033			CMP #33,R2
	006614	003403				 BLE 4$
	006616	012702	000040			MOV #40,R2
	006622	040200				BIC R2,R0		; CLEAR THE 40 BIT
						
	006624	016102	000042		4$:	MOV TS.PTR(R1),R2	; CHARACTER ESCAPE SEQUENCE
	006630	012722	000034			MOV #CBSL,(R2)+
	006634	012622				MOV (SP)+,(R2)+		; POP (R5)+
	006636	010022				MOV R0,(R2)+
	006640	012761	000003	000044		MOV #3,TS.CNT(R1)
					;	MOV TSTR(R3),TS.PTR(R1)
	006646	005261	000036			INC AL.BLK(R1)
	006652	000654				BR TTSTRH
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 53
	GLPT;R11MUX 103	PAGE 1.52 	MAIN PROGRAM QUEUE PROCESSING ROUTINES

	006654	116146	000025		TCHPUT:	MOVB TTYNUM(R1),-(SP)	; CONSTRUCT CHARACTER MESSAGE (CHARACTER,,LINE SELECT)
	006660	042700	000200			BIC #%SPKEY,R0		; DONT SEND 8 BIT CHARS!!
	006664	110066	000001			MOVB R0,1(SP)
	006670	017102	000012			MOV @TO.PTR(R1),R2
	006674	012622				MOV (SP)+,(R2)+
	006676	020271	000014			CMP R2,@TO.END(R1)
	006702	001002				 BNE 1$
	006704	017102	000016			MOV @TO.BEG(R1),R2
					
	006710	020271	000020		1$:	CMP R2,@TO.LIM(R1)	; SEE IF OUTPUT IS NOW BLOCKED
	006714	001002				 BNE 2$
	006716	005271	000032			INC @TO.BLK(R1)		; YES, SO SET INDICATOR
					
					2$:	MASK 7			; INTERRUPT SENSITIVE CODE
						PUSH %PS
					.IRP Y,<%PS>
						MOV Y,-(SP)
					.ENDM
	006722	016746	171050			MOV %PS,-(SP)
	006726	012767	000340	171042		MOV #<7>_5,%PS
	006734	005761	000044			TST TS.CNT(R1)
	006740	001007				 BNE 3$			; THERE IS STILL MORE TEMPORARY STRING STUFF TO DO.
	006742	026161	000006	000000		CMP TI.LIM(R1),TI.PTR(R1)
	006750	001003				 BNE 3$			; THERE ARE MORE INPUT CHARS BUFFERED.
	006752	016373	002210	060066		MOV STTY(R3),@MTTY(R3)	; NOTHING LEFT TO DO.
					
	006760	010271	000012		3$:	MOV R2,@TO.PTR(R1)	; UPDATE THE OUTPUT POINTER NOW
	006764	005061	000030			CLR TI.BLK(R1)
	006770	012767	000001	174000		MOV #WAITIN,WAITPL
	006776	052767	000100	166610		BIS #100,XDST0		; ENABLE INTERRUPTS
						UNMASK
						POP %PS
					.IRP Y,<%PS>
						MOV (SP)+,Y
					.ENDM
	007004	012667	170766			MOV (SP)+,%PS
						RET
	007010	000207				RTS PC
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 54
	GLPT;R11MUX 103	PAGE 1.53 	SPECIAL KEY HANDLERS

					.SBTTL  SPECIAL KEY HANDLERS
					
					NONAS1:
					KBRK:	JCALL INTYSB
	007012	000167	003364			JMP INTYSB
					KESC:
					KCALL:
					KCLEAR:
					KDEL:
					KCIRM:
					KGRAD:
					KCIRP:
					KBACK:
					KNEXT:
					KHELP:
					KFORM:
					KBS:
					KVT:
					KCR:
					KLINE:
					FDELT:
					KRPT:
					KTAB:
					KSPACE:
					KNOOP:	MASK 7			; INTERRUPT SENSITIVE CODE
						PUSH %PS
					.IRP Y,<%PS>
						MOV Y,-(SP)
					.ENDM
	007016	016746	170754			MOV %PS,-(SP)
	007022	012767	000340	170746		MOV #<7>_5,%PS
	007030	026161	000006	000000		CMP TI.LIM(R1),TI.PTR(R1)
	007036	001003				 BNE 1$			; THERE ARE MORE INPUT CHARS BUFFERED.
	007040	016373	002210	060066		MOV STTY(R3),@MTTY(R3)	; NOTHING LEFT TO DO.
	007046	005061	000030		1$:	CLR TI.BLK(R1)
	007052	012767	000001	173716		MOV #WAITIN,WAITPL
						UNMASK
						POP %PS
					.IRP Y,<%PS>
						MOV (SP)+,Y
					.ENDM
	007060	012667	170712			MOV (SP)+,%PS
						RET
	007064	000207				RTS PC
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 55
	GLPT;R11MUX 103	PAGE 1.54 	GOULD MAIN PROGRAM ROUTINE 

					.SBTTL GOULD MAIN PROGRAM ROUTINE 
					
	007066	016301	060006		MRGLSB:	MOV RSTA(R3),R1
					;	TST MR.BLK(R1)		; NOTHING SHOULD SET THIS
					;	 BNE 11$
					;	TST RO.BLK(R1)		; UNNECESSARY UNTIL WE GET A CONSOLE DEVICE
					;	 BNE 11$
	007072	005767	051704			TST GLBLK		; OUTPUT QUEUE FILLED
	007076	001003				 BNE 11$
	007100	005767	051720			TST GLERR		; IN THE MIDST OF SOME ERROR
	007104	001403				 BEQ 10$
	007106	062716	000004		11$:	ADD #4,(SP)
						RET
	007112	000207				RTS PC
					
	007114	016102	000006		10$:	MOV RI.LIM(R1),R2
	007120	016704	051644			MOV GTPTR,R4		; TEMPORARY POINTER (NECESSARY SINCE ITEMS
									; IN QUEUE HAVE "WIDTH")
					
	007124	000177	051620		JMPDEC:	JMP @GLDPND		; DISPATCH TO ANY PENDING OPERATIONS DUE TO GL QUEUE
									; BLOCKAGE (DEFAULT IS CHRDEC)
					
	007130	005363	060152		CHRDEC:	DEC ALNUM(R3)
	007134	003001				BGT 4$
	007136	000000				HALT
	007140	112200			4$:	MOVB (R2)+,R0		; PICK UP CHARACTER
	007142	100055				BPL DATHAC		; SKIP AROUND IF CHARACTER IS NOT AN EIGHT BIT CODE
	007144	005767	051610			TST QOTFLG		; IS THIS CHARACTER TO BE QUOTED?
	007150	001403				 BEQ 2$
	007152	005067	051602			CLR QOTFLG		; YEP, PASS IT ON
	007156	000454				BR DATACH
	007160	120027	000301		2$:	CMPB R0,#%CCACK		; ARE WE BEING PAGED?
	007164	001007				 BNE HERE
	007166	116767	156607	051642		MOVB GLDCSR+1,STAERR
	007174	105067	173400			CLRB STATBR		; RESPOND WITH STATUS (ACTIVATE DAEMON)
	007200	000167	001606			 JMP GLOOP
					
	007204	120027	000205		HERE:	CMPB R0,#%CCSOD		; START OF DATA?
	007210	001004				BNE 4$
	007212	005067	051540			CLR EODFLG		; YEP, FLAG START OF DATA
	007216	000167	001570			 JMP GLOOP
	007222	005767	051530		4$:	TST EODFLG		; ARE WE RECEIVING RANDOM CHARACTERS?
	007226	001402				 BEQ 51$
	007230	000167	001556			 JMP GLOOP		; FORGET THEM
	007234	120027	000215		51$:	CMPB R0,#%CCQOT		; SHOULD WE QUOTE THE NEXT CHARACTER?
	007240	001004				 BNE 5$
	007242	005267	051512			INC QOTFLG		; YEP
	007246	000167	001540			 JMP GLOOP
	007252	120027	000206		5$:	CMPB R0,#%CCEOD		; END OF DATA?
	007256	001014				 BNE DATACH
	007260	005267	051472			INC EODFLG		; YEP, FLAG END OF DATA
	007264	052767	000100	170254		BIS #100,%LKS 		; START UP CLOCK (COUNT DOWN FOR SMEAR PAGE)
	007272	000167	001514			 JMP GLOOP
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 56
	GLPT;R11MUX 103	PAGE 1.55 	GOULD MAIN PROGRAM ROUTINE 

	007276	005767	051454		DATHAC:	TST EODFLG		; NON EIGHT BIT CODE, IS IT RANDOM DATA?
	007302	001402				BEQ DATACH
	007304	000167	001502			JMP GLOOP
					
	007310	000177	051436		DATACH:	JMP @WRDPTR		; MUST BE DATA THEN
					
	007314	110067	051424		MAKWD1:	MOVB R0,TMPWRD		;FIRST PIECE OF WORD
	007320	012767	007332	051424		MOV #MAKWD2,WRDPTR
	007326	000167	001460			 JMP GLOOP
					
	007332	110067	051407		MAKWD2:	MOVB R0,TMPWRD+1	;SECOND PIECE OF WORD
	007336	012767	007314	051406		MOV #MAKWD1,WRDPTR
					
	007344	000177	051404			JMP @GLDPTR		; DISPATCH TO PROPER COMMAND HANDLER
					
	007350	005767	051370		DATDEC:	TST TMPWRD		; COMMAND OR LINE BUFFER?
	007354	100402				 BMI COMDEC
	007356	000167	000402			 JMP DMADEC		; BIT 15 NOT SET, LINE BUFFER
					
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 57
	GLPT;R11MUX 103	PAGE 1.56 	GOULD COMMAND PROCESSING

					.SBTTL GOULD COMMAND PROCESSING
					;  COMMAND DECODING 
					
					
	007362	042767	100000	051354	COMDEC:	BIC #100000,TMPWRD	; REMOVE COMMAND BIT
	007370	010405				MOV R4,R5
	007372	062705	000004			ADD #4,R5		; ADD 4, R5 POINTS TO LAST LOCATION IN POTENTIAL COMMAND
					
	007376	052767	000340	170372		BIS #PRIOR7,%PS		;MASK
	007404	026767	051360	051364		CMP GTPTR,GLLIM		; ARE WE AHEAD OF PICK UP POINTER ANYWAY?  (THEN OK)
	007412	103015				BHIS 2$
	007414	020567	051356			CMP R5,GLLIM		; IF WE GO THROUGH WITH THIS COMMAND, WILL WE
									; LAP OTHER POINTER?  (THEN NOT OK)
	007420	103412				BLO 2$
	007422	005267	051354			INC GLBLK		; GL QUEUE IS BLOCKED, WAIT FOR QUEUE TO EMPTY A LITTLE
	007426	042767	000340	170342		BIC #PRIOR0,%PS
	007434	012767	007362	051306		MOV #COMDEC,GLDPND	; AND MAKE SURE WE WIND UP IN THE RIGHT PLACE ON RETURN
	007442	000167	001340			 JMP GLDXIT
	007446	042767	000340	170322	2$:	BIC #PRIOR0,%PS		; NO PROBLEM
	007454	012767	007130	051266		MOV #CHRDEC,GLDPND
					
	007462	032767	040000	051254		BIT #40000,TMPWRD	; MACRO BIT TEST
	007470	001437				 BEQ DLYTST		; NOPE, IS STANDARD OR PSEUDO COMMAND
					
					; GOULD MACRO COMMANDS
	007472	116767	051246	000066		MOVB TMPWRD,UPWORD	; UP COMING PAGE NUMBER
	007500	116700	051241			MOVB TMPWRD+1,R0
	007504	042700	177700			BIC #177700,R0	
	007510	006200				ASR R0
	007512	006200				ASR R0
	007514	006200				ASR R0
	007516	016724	000044			MOV UPWORD,(R4)+
	007522	012724	100000			MOV #100000,(R4)+
	007526	016024	007556			MOV MACTAB(R0),(R4)+
	007532	006200				ASR R0
	007534	010067	051222			MOV R0,GRFFLG
	007540	020027	000003			CMP R0,#3
	007544	001002				BNE 4$
	007546	005067	051210			CLR GRFFLG
	007552	000167	001146		4$:	 JMP GLDFIN		; COMPLETION OF COMMAND
						
	007556	011144			MACTAB:	.WORD SALBLK
	007560	011154				.WORD SLGBLK
	007562	011170				.WORD SHGBLK
	007564	011202				.WORD EOFBLK
					
	007566	120000			UPWORD:	.WORD 120000
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 58
	GLPT;R11MUX 103	PAGE 1.57 	GOULD COMMAND PROCESSING

					; NORMAL GOULD COMMANDS
					
					;DETERMINE IF THIS IS A DELAYED COMMAND
	007570	032767	000200	051146	DLYTST:	BIT #200,TMPWRD		; LINE ADVANCE OR HOME? (OR PSEUDO COMMAND)
	007576	001031				 BNE DLAYCM
	007600	122767	000003	051136		CMPB #%GCON,TMPWRD	; ENABLE?
	007606	001425				 BEQ DLAYCM
	007610	105767	051130			TSTB TMPWRD		; FEED?
	007614	001422				BEQ DLAYCM
					
					;IF WE GOT TO HERE, MUST BE AN IMMEDIATE COMMAND
	007616	122767	000001	051120		CMPB #%GCGRF,TMPWRD	; GRAPHIC SELECT?
	007624	001002				 BNE 1$
	007626	005267	051130			INC GRFFLG
	007632	122767	000004	051104	1$:	CMPB #%GCOFF,TMPWRD	; DISABLE?
	007640	001002				 BNE 2$
	007642	005067	051114			CLR GRFFLG		; CLEAR MODE SELECTION
	007646	105067	051073		2$:	CLRB TMPWRD+1		; IMMEDIATE COMMAND SIGNIFIED BY 0 IN BYTE 1
	007652	016724	051066			MOV TMPWRD,(R4)+
	007656	000167	001042			 JMP GLDFIN		; COMPLETION OF A COMMAND
					
	007662	032767	000100	051054	DLAYCM:	BIT #100,TMPWRD
	007670	001426				BEQ HERE4
					
					; REQUEST FOR REPEAT, IN ACTUALITY
	007672	032767	000002	051044		BIT #2,TMPWRD
	007700	001007				BNE 1$
					
					; START OF REPEAT
	007702	012724	140000			MOV #140000,(R4)+
	007706	012767	007730	051040		MOV #REPTRN,GLDPTR	; WE NEED ANOTHER WORD HERE (THE REPEAT COUNT)
	007714	000167	001066			 JMP GLDXIT
					
					; END OF REPEAT
	007720	012724	140001		1$:	MOV #140001,(R4)+
	007724	000167	000774			 JMP GLDFIN		; COMPLETION OF A COMMAND
					
	007730	016724	051010		REPTRN:	MOV TMPWRD,(R4)+
	007734	012767	007350	051012		MOV #DATDEC,GLDPTR
	007742	000167	000756			 JMP GLDFIN		; COMPLETION OF A COMAND
					
					
	007746	112767	000001	050771	HERE4:	MOVB #1,TMPWRD+1	; DELAYED COMMAND SIGNIFIED BY 1 IN BYTE 1
	007754	016724	050764			MOV TMPWRD,(R4)+
	007760	000167	000740			JMP GLDFIN		; COMPLETION OF A COMMAND
					
					;  DMA BUFFER DECODING 
					
					
	007764	005767	050772		DMADEC:	TST GRFFLG
	007770	001510				BEQ ALPHAM		; MUST BE ALPHA MODE
					
					;  GRAPHICS MODE 
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 59
	GLPT;R11MUX 103	PAGE 1.58 	GOULD COMMAND PROCESSING

	007772	032767	000200	050744	GRAPHM:	BIT #200,TMPWRD		; RUN LENGTH ENCODED?
	010000	001402				 BEQ IMAGE
	010002	000167	000360			 JMP RUNLEN		; YEP
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 60
	GLPT;R11MUX 103	PAGE 1.59 	GOULD IMAGE MODE DATA HANDLING

					.SBTTL  GOULD IMAGE MODE DATA HANDLING
					
	010006	116767	050732	050720	IMAGE:	MOVB TMPWRD,DATLEN	; LENGTH OF DATA
	010014	116705	050725			MOVB TMPWRD+1,R5
	010020	010567	050706			MOV R5,MARLEN		; LENGTH OF MARGIN
	010024	066705	050704			ADD DATLEN,R5		; TOTAL SIZE OF BUFFER (IN WORDS)
	010030	010567	050706			MOV R5,MARLN1		; SAVE FOR DMA COUNT
	010034	006305				ASL R5			; NOW IN BYTES
	010036	060405				ADD R4,R5
									; LOCATION OF PROPOSED BUFFER
					
	010040	052767	000340	167730		BIS #PRIOR7,%PS		; MASK
	010046	020467	050724			CMP R4,GLLIM		; ARE WE AHEAD OF PICK UP POINTER ANYWAY? (THEN OK)
	010052	103015				BHIS 4$
	010054	020567	050716			CMP R5,GLLIM		; IF WE GO THROUGH WITH THIS BUFFER, WILL WE
									; LAP THE OTHER POINTER? (THEN NOT OK)
	010060	103412				BLO 4$
	010062	005267	050714			INC GLBLK		; BLOCKED OUTPUT, WAIT FOR QUEUE TO EMPTY A LITTLE
	010066	042767	000340	167702		BIC #PRIOR0,%PS		; UNMASK
	010074	012767	010006	050646		MOV #IMAGE,GLDPND	; MAKE SURE WE COME BACK TO THE RIGHT PLACE
	010102	000167	000700			 JMP GLDXIT		; NEED MORE SPACE
					
	010106	042767	000340	167662	4$:	BIC #PRIOR0,%PS		; NO PROBLEM
	010114	012767	007130	050626		MOV #CHRDEC,GLDPND	; WE HAVE ENOUGH SPACE NOW
					
	010122	005467	050614			NEG MARLN1		; NEGATION OF TOTAL SIZE OF BUFFER
	010126	016724	050610			MOV MARLN1,(R4)+	; WORD COUNT HEADER FOR DMA COMMAND
	010132	005767	050574			TST MARLEN		; ZERO MARGIN?
	010136	001404				BEQ 2$
	010140	005024			1$:	CLR (R4)+
	010142	005367	050564		3$:	DEC MARLEN
	010146	001374				BNE 1$
	010150	012767	010162	050576	2$:	MOV #IMTRAN,GLDPTR
	010156	000167	000624			 JMP GLDXIT		; NEED MORE WORDS (REST OF LINE BUFFER)
					
					
	010162	016724	050556		IMTRAN:	MOV TMPWRD,(R4)+
	010166	005367	050542			DEC DATLEN
	010172	001402				 BEQ 2$
	010174	000167	000606			 JMP GLDXIT		; IF MORE IMAGE DATA COMING (NEED MORE WORDS)
	010200	012767	007350	050546	2$:	MOV #DATDEC,GLDPTR	; DON'T NEED ANY MORE WORDS
	010206	000167	000512			 JMP GLDFIN		; COMPLETION OF COMMAND
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 61
	GLPT;R11MUX 103	PAGE 1.60 	GOULD ALPHA MODE DATA HANDLING

					.SBTTL  GOULD ALPHA MODE DATA HANDLING
					
	010212	116705	050526		ALPHAM:	MOVB TMPWRD,R5
	010216	010567	050512			MOV R5,DATLEN
	010222	010567	050510			MOV R5,DATLN1
	010226	006305				ASL R5
	010230	060405				ADD R4,R5
					
					
	010232	052767	000340	167536		BIS #PRIOR7,%PS		;MASK
	010240	020467	050532			CMP R4,GLLIM		; ARE WE AHEAD OF PICK UP POINTER ANYWAY? (OK)
	010244	103015				BHIS 2$
	010246	020567	050524			CMP R5,GLLIM		; IF WE GO THROUGH WITH THIS BUFFER, WILL WE
									; LAP OTHER POINTER? (NOT OK)
	010252	103412				BLO 2$
	010254	005267	050522			INC GLBLK		; BLOCKED OUTPUT, WAIT FOR QUEUE TO EMPTY A LITTLE
	010260	042767	000340	167510		BIC #PRIOR0,%PS		;UNMASK
	010266	012767	010212	050454		MOV #ALPHAM,GLDPND	; MAKE SURE WE COME BACK HERE (NEED MORE SPACE)
	010274	000167	000506			 JMP GLDXIT
	010300	042767	000340	167470	2$:	BIC #PRIOR0,%PS		;UNMASK, NO PROBLEM
	010306	012767	007130	050434		MOV #CHRDEC,GLDPND	; WE'VE GOT THE SPACE NOW
					
	010314	005467	050416			NEG DATLN1
	010320	016724	050412			MOV DATLN1,(R4)+
	010324	012767	010336	050422		MOV #ALPTRN,GLDPTR	; GOBBLE WORDS FOR BUFFER
	010332	000167	000450			 JMP GLDXIT
					
	010336	016724	050402		ALPTRN:	MOV TMPWRD,(R4)+
	010342	005367	050366			DEC DATLEN
	010346	001402				 BEQ 2$
	010350	000167	000432			 JMP GLDXIT		; WE NEED MORE WORDS
	010354	012767	007350	050372	2$:	MOV #DATDEC,GLDPTR
	010362	000167	000336			 JMP GLDFIN		; COMPLETION OF COMMAND
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 62
	GLPT;R11MUX 103	PAGE 1.61 	GOULD RUN LENGTH ENCODING MODE DATA HANDLING

					.SBTTL  GOULD RUN LENGTH ENCODING MODE DATA HANDLING
					
	010366	116767	050352	050344	RUNLEN: MOVB TMPWRD,ENCLEN
	010374	042767	177600	050336		BIC #STRIP,ENCLEN	; WORD COUNT OF RUN LENGTH ENCODED DATA
	010402	012767	010414	050344		MOV #RUNLN2,GLDPTR	; WE NEED ANOTHER WORD OF COMMAND
	010410	000167	000372			 JMP GLDXIT
					
	010414	005067	050344		RUNLN2:	CLR COLOR
	010420	116767	050320	050304		MOVB TMPWRD,MARLEN
	010426	100005				 BPL 1$
	010430	005267	050330			INC COLOR
	010434	042767	177600	050270		BIC #STRIP,MARLEN	; LENGTH OR MARGIN (IN WORDS)
	010442	116705	050277		1$:	MOVB TMPWRD+1,R5
	010446	042705	177600			BIC #STRIP,R5		; LENGTH OF DECODED BUFFER, LESS MARGIN
	010452	066705	050254			ADD MARLEN,R5		; TOTAL LENGTH OF BUFFER (IN WORDS)
	010456	010567	050252			MOV R5,DATLEN
	010462	006305				ASL R5			; NOW IN BYTES
	010464	060405				ADD R4,R5
					
	010466	052767	000340	167302		BIS #PRIOR7,%PS		;MASK
	010474	020467	050276			CMP R4,GLLIM		; ARE WE AHEAD OF PICK UP POINTER ANYWAY? (OK)
	010500	103015				BHIS 2$
	010502	020567	050270			CMP R5,GLLIM		; IF WE GO THROUGH WITH THIS BUFFER, WILL WE
									; LAP OTHER POINTER (NOT OK)
	010506	103412				BLO 2$
	010510	005267	050266			INC GLBLK		; BLOCKED OUTPUT, WAIT FOR QUEUE TO EMPTY A LITTLE
	010514	042767	000340	167254		BIC #PRIOR0,%PS		;UNMASK
	010522	012767	010414	050220		MOV #RUNLN2,GLDPND
	010530	000167	000252			 JMP GLDXIT
	010534	042767	000340	167234	2$:	BIC #PRIOR0,%PS		;UNMASK, NO PROBLEM
	010542	012767	007130	050200		MOV #CHRDEC,GLDPND	; WE'VE GOT ENOUGH SPACE NOW
					
	010550	012767	010636	050176		MOV #RUNTRN,GLDPTR
	010556	005467	050152			NEG DATLEN
	010562	016724	050146			MOV DATLEN,(R4)+	; WORD COUNT, DMA COMMAND HEADER
	010566	005067	050142			CLR DATLEN
	010572	005767	050134			TST MARLEN
	010576	001415				BEQ 3$			; ZERO LENGTH MARGIN?
	010600	005767	050160			TST COLOR
	010604	001406				BEQ 21$			; IF COLOR = 0, THEN WHITE MARGIN
	010606	012724	177777		22$:	MOV #177777,(R4)+
	010612	005367	050114			DEC MARLEN
	010616	001373				BNE 22$
	010620	000404				BR 3$
					
	010622	005024			21$:	CLR (R4)+
	010624	005367	050102			DEC MARLEN
	010630	001374				BNE 21$
					
	010632	000167	000150		3$:	 JMP GLDXIT		; NEED MORE WORDS
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 63
	GLPT;R11MUX 103	PAGE 1.62 	GOULD RUN LENGTH ENCODING MODE DATA HANDLING

	010636	116705	050102		RUNTRN:	MOVB TMPWRD,R5
	010642	100010				BPL 1$
	010644	042705	177600			BIC #STRIP,R5
	010650	001411				 BEQ 4$
	010652	112724	177777		2$:	MOVB #177777,(R4)+
	010656	005305				DEC R5
	010660	001374				 BNE 2$
	010662	000404				 BR 4$
					
	010664	001403			1$:	 BEQ 4$
	010666	105024			3$:	CLRB (R4)+
	010670	005305				DEC R5
	010672	001375				 BNE 3$
					
	010674	116724	050045		4$:	MOVB TMPWRD+1,(R4)+
	010700	005367	050034			DEC ENCLEN
	010704	001402				 BEQ 41$
	010706	000167	000074			 JMP GLDXIT		; STILL NEED MORE WORDS
					
	010712	012767	007350	050034	41$:	MOV #DATDEC,GLDPTR
	010720	000167	000000			 JMP GLDFIN		; COMPLETED COMMAND
					
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 64
	GLPT;R11MUX 103	PAGE 1.63 	GOULD RUN LENGTH ENCODING MODE DATA HANDLING

	010724	020467	050042		GLDFIN:	CMP R4,GLEND
	010730	103402				BLO 1$
	010732	016704	050036			MOV GLBEG,R4
	010736	020467	050034		1$:	CMP R4,GLLIM
	010742	001002				BNE 2$
	010744	005267	050032			INC GLBLK
	010750	010467	050012		2$:	MOV R4,GLPTR
	010754	010467	050010			MOV R4,GTPTR
	010760	005767	050036			TST GLIDL		; IS THE GOULD IDLE?
	010764	001412				BEQ GLOOP
						MASK 5			; FAKE AN INTERRUPT
						PUSH %PS
					.IRP Y,<%PS>
						MOV Y,-(SP)
					.ENDM
	010766	016746	167004			MOV %PS,-(SP)
	010772	012767	000240	166776		MOV #<5>_5,%PS
						CALL GLDINT		; GO TO HANDLER WITH ANXIOUSLY AWAITED CRUFT
	011000	004767	173372			JSR PC,GLDINT
	011004	000402				BR GLOOP
					
	011006	010467	047756		GLDXIT:	MOV R4,GTPTR
					
	011012	020261	000002		GLOOP:	CMP R2,RI.END(R1)	; END OF INPUT QUEUE?
	011016	001002				 BNE 1$
	011020	016102	000004			MOV RI.BEG(R1),R2	; CIRCLE AROUND TO BEGINNING
	011024	010261	000006		1$:	MOV R2,RI.LIM(R1)
	011030	026327	060152	000137		CMP ALNUM(R3),#ALCLIM
	011036	002004				BGE 5$
						CALL ALLCSB
	011040	004767	001610			JSR PC,ALLCSB
	011044	005267	050000			INC GLDALC		; NECESSARY, ELSE GOULD LOCKS OUT ITS OWN ALLOCATER
	011050	052767	000340	166720	5$:	BIS #PRIOR7,%PS
	011056	020261	000000			CMP R2,RI.PTR(R1)
	011062	001416				 BEQ 3$
	011064	042767	000340	166704		BIC #PRIOR0,%PS
					;	TST RO.BLK(R1)
					;	 BNE 6$			; UNNECESSARY UNTIL CONSOLE DEVICE EXISTS
	011072	005767	047704			TST GLBLK
	011076	001016				 BNE 6$
	011100	005767	047744			TST GLDALC
	011104	001002				 BNE 7$
	011106	000167	176012			 JMP JMPDEC
					
	011112	005067	047732		7$:	CLR GLDALC
	011116	000411				 BR 8$
					
	011120	016373	002200	060046	3$:	MOV SRTY(R3),@MRTY(R3)
	011126	042767	000340	166642		BIC #PRIOR0,%PS
					
	011134	012767	000001	171634	6$:	MOV #WAITIN,WAITPL
					8$:	RET
	011142	000207				RTS PC
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 65
	GLPT;R11MUX 103	PAGE 1.64 	GOULD RUN LENGTH ENCODING MODE DATA HANDLING

					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 66
	GLPT;R11MUX 103	PAGE 1.65 	PREDEFINED  GOULD MACRO BLOCKS 

					.SBTTL  PREDEFINED  GOULD MACRO BLOCKS 
					
								; ALPHA MODE SELECT
	011144	000004			SALBLK:	.WORD 4			; DISABLE
	011146	000403				.WORD 403		; ENABLE
	011150	000002				.WORD 2			; CUT
	011152	100001				.WORD 100001		; POPJ
					SALEND:
					
								; LOW SPEED GRAPHICS MODE SELECT
	011154	000004			SLGBLK:	.WORD 4			; DISABLE
	011156	000001				.WORD 1			; GRAPHIC COMMAND
	011160	000005				.WORD 5			; LAST LINE FLAG
	011162	000403				.WORD 403		; ENABLE
	011164	000002				.WORD 2			; CUT
	011166	100001				.WORD 100001		; POPJ
					SLGEND:
					
								; HIGH SPEED GRAPHICS MODE SELECT
	011170	000004			SHGBLK:	.WORD 4			; DISABLE
	011172	000001				.WORD 1			; GRAPHIC COMMAND
	011174	000403				.WORD 403		; ENABLE
	011176	000002				.WORD 2			; CUT
	011200	100001				.WORD 100001		; POPJ
					SHGEND:
					
					
								; EOF OF FILE
	011202	000002			EOFBLK:	.WORD 2			; CUT	------|
									;	      |
	011204	000004				.WORD 4			; DISABLE     |
	011206	000403				.WORD 403		; ENABLE      |
									;       <-----|
	011210	000601				.WORD 601		; LINE ADVANCE
	011212	140000				.WORD 140000		; REPEAT 12 (OCTAL) TIMES
	011214	000012				.WORD 12
	011216	177676				.WORD -102			; DMA COUNT
		000102				.REPT 102
						.NLIST
						.WORD 36475		; DOUBLE DASH
						.LIST
					.ENDR
	011424	140001				.WORD 140001		; END OF REPEAT
					;	.WORD 100		; END OF FILE INDICATOR
					;	.WORD -22			; DMA COUNT
					;	.ASCII /          /
					;	.BLKW 3
					;PAGLST:	.ASCII /  O(TCLA )APEG SAB D/	;  (OCTAL) PAGES BAD
	011426	140000				.WORD 140000		; REPEAT 12 (OCTAL) TIMES
	011430	000012				.WORD 12
	011432	177676				.WORD -102			; DMA COUNT
		000102				.REPT 102		; DOUBLE DASH
						.NLIST
						.WORD 36475
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 67
	GLPT;R11MUX 103	PAGE 1.66 	PREDEFINED  GOULD MACRO BLOCKS 

						.LIST
					.ENDR
	011640	140001				.WORD 140001		; END OF REPEAT
					
	011642	100001				.WORD 100001		; JMP TO WHERE WE WERE BEFORE
					EOFEND:
		011744			PAGLST:	.BLKW 40		; TEMPORARY
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 68
	GLPT;R11MUX 103	PAGE 1.67 	PREDEFINED  GOULD MACRO BLOCKS 

					
								; SMEAR PROTECTION PAGE
	011744	000004			SMRBLK:	.WORD 4			; DISABLE
	011746	000403				.WORD 403		; ENABLE
	011750	000002				.WORD 2			; CUT
	011752	140000				.WORD 140000		; START REPEAT
	011754	000025				.WORD 25		;	25 (OCTAL) TIMES
	011756	177777				.WORD -1		; DMA COUNT
	011760	020040				.WORD 20040		; DOUBLE SPACE
	011762	140001				.WORD 140001		; END REPEAT
	011764	100001				.WORD 100001		; END JUMP
					SMREND:
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 69
	GLPT;R11MUX 103	PAGE 1.68 	NUMBER TO STRING CONVERSION ROUTINE

					.SBTTL NUMBER TO STRING CONVERSION ROUTINE
					
					CHRNUM:	PUSH <R1,R4>
					.IRP Y,<R1,R4>
						MOV Y,-(SP)
					.ENDM
	011766	010146				MOV R1,-(SP)
	011770	010446				MOV R4,-(SP)
	011772	012704	000005			MOV #5,R4
	011776	010001			1$:	MOV R0,R1
	012000	042701	177770			BIC #177770,R1
	012004	062701	000060			ADD #60,R1
	012010	110145				MOVB R1,-(R5)
	012012	005304				DEC R4
	012014	001404				BEQ 2$
	012016	006200				ASR R0
	012020	006200				ASR R0
	012022	006200				ASR R0
	012024	000764				BR 1$
	012026	005700			2$:	TST R0
	012030	100403				BMI 3$
	012032	112745	000060			MOVB #60,-(R5)
	012036	000402				 BR 4$
	012040	112745	000061		3$:	MOVB #61,-(R5)
	012044	000325			4$:	SWAB (R5)+		; GOULD LIKES 'EM BACKWARDS
	012046	000325				SWAB (R5)+
	012050	000325				SWAB (R5)+
						POP <R4,R1>
					.IRP Y,<R4,R1>
						MOV (SP)+,Y
					.ENDM
	012052	012604				MOV (SP)+,R4
	012054	012601				MOV (SP)+,R1
						RET
	012056	000207				RTS PC
					
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 70
	GLPT;R11MUX 103	PAGE 1.69 	ALLOCATION AND ^G M.P. MESSAGE HANDLERS

					.SBTTL ALLOCATION AND ^G M.P. MESSAGE HANDLERS
					;  MAIN PROGRAM ROUTINE FOR ALLOCATION MESSAGE HANDLING 
					
					; AL.BLK SET FOR 12 BIT CODE EXPANSION AND ^\ DOUBLING
					
					
	012060	016301	060016		MRALSB:	MOV TSTA(R3),R1		; CREATE POINTER TO TRANSMIT STATUS BLOCK
	012064	005771	000032			TST @TO.BLK(R1)
	012070	001003				 BNE 11$
	012072	005761	000036			TST AL.BLK(R1)		; ARE WE OUT OF ORDER?
	012076	001403				 BEQ 10$
	012100	062716	000004		11$:	ADD #4,(SP)		; THEN PRETEND NOTHING HAPPENED
						RET
	012104	000207				RTS PC
	012106	017300	057776		10$:	MOV @ALCP(R3),R0	; POINTER ALLOCATION MESSAGE
	012112	017305	057756			MOV @MCNT(R3),R5	; COUNT OF WORDS TO TRANSFER
	012116	017102	000012			MOV @TO.PTR(R1),R2	; LOAD POINTER TO QUEUE
	012122	012022			4$:	MOV (R0)+,(R2)+		; OUTPUT CHARACTER MESSAGE
	012124	020271	000014			CMP R2,@TO.END(R1)	; ARE WE AT END OF QUEUE?
	012130	001002				 BNE 1$
	012132	017102	000016			MOV @TO.BEG(R1),R2	; CIRCLE AROUND TO BEGINNING THEN
	012136	020271	000020		1$:	CMP R2,@TO.LIM(R1)	; POINTER OVERLAP?
	012142	001020				 BNE 2$
	012144	005271	000032			INC @TO.BLK(R1)
	012150	005305				DEC R5			; HAVE WE FINISHED YET
	012152	001416				BEQ 3$	
	012154	010573	057756			MOV R5,@MCNT(R3)		; NOPE, SAVE COUNT
	012160	010073	057776			MOV R0,@ALCP(R3)	; AND ALLOCATION MESSAGE POINTER
	012164	010271	000012			MOV R2,@TO.PTR(R1)	; RESTORE POINTER
	012170	005261	000034			INC MT.BLK(R1)
	012174	012767	000001	170574		MOV #WAITIN,WAITPL	; PATCH WAIT SINCE WE MADE SOME HEADWAY
						RET
	012202	000207				RTS PC
	012204	005305			2$:	DEC R5
	012206	001345				BNE 4$
	012210	016373	002220	060056	3$:	MOV SRAL(R3),@MRAL(R3)	; PATCH FLAG
	012216	012773	000003	057756		MOV #3,@MCNT(R3)	; RE-INITIALIZE COUNT
	012224	012767	000001	170544		MOV #WAITIN,WAITPL	; PATCH WAIT
	012232	005061	000034			CLR MT.BLK(R1)		; UNBLOCK NORMAL TTY OUTPUT
	012236	010271	000012			MOV R2,@TO.PTR(R1)	; RESTORE POINTER	
	012242	052767	000100	163344		BIS #100,XDST0		; ACTIVATE INTERRUPT
						RET
	012250	000207				RTS PC
					
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 71
	GLPT;R11MUX 103	PAGE 1.70 	ALLOCATION AND ^G M.P. MESSAGE HANDLERS

					;  MAIN PROGRAM ROUTINE FOR CONTROL-G MESSAGE HANDLING 
					; NOTE: IF IN THE FUTURE MORE THAN ONE CHARACTER MUST BE OUTPUT
					;(I.E. MORE THAN JUST ^G) REMEMBER TO INCREMENT MR.BLK(R1)
					; WHEN CAN'T FINSIH MESSAGE DUE TO FULL RO QUEUE
					
					
	012252	016301	060006		MTCGSB:	MOV RSTA(R3),R1
	012256	005761	000036			TST CG.BLK(R1)
	012262	001003				BNE 11$
	012264	005761	000032			TST RO.BLK(R1)
	012270	001403				 BEQ 10$
	012272	062716	000004		11$:	ADD #4,(SP)		; RETURN TO .+4
						RET
	012276	000207				RTS PC
	012300	012700	000007		10$:	MOV #CG,R0
	012304	016102	000012			MOV RO.PTR(R1),R2
	012310	110022				MOVB R0,(R2)+
	012312	020261	000014			CMP R2,RO.END(R1)
	012316	001002				 BNE 1$
	012320	016102	000016			MOV RO.BEG(R1),R2
	012324	020261	000020		1$:	CMP R2,RO.LIM(R1)
	012330	001002				 BNE 2$
	012332	005261	000032			INC RO.BLK(R1)
	012336	010261	000012		2$:	MOV R2,RO.PTR(R1)
	012342	052773	000100	060136		BIS #100,@XTST(R3)
	012350	016373	002230	060076		MOV STCG(R3),@MTCG(R3)
	012356	012767	000001	170412		MOV #WAITIN,WAITPL
	012364	005061	000034			CLR MR.BLK(R1)
						RET
	012370	000207				RTS PC
					
					; OTHER M.P. ROUTINES NOT DEFINED YET
					MRPLSB:	RET		; PLASMA DISPLAY
	012372	000207				RTS PC
					
					MRIMSB:	RET		; IMLAC RECEIVE
	012374	000207				RTS PC
					
					MTIMSB:	RET		; IMLAC XMIT
	012376	000207				RTS PC
					
					NULLSB:	RET		; DUMMY
	012400	000207				RTS PC
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 72
	GLPT;R11MUX 103	PAGE 1.71 	ROUTINES FOR INTIALIZING TTY CHANNELS

					.SBTTL ROUTINES FOR INTIALIZING TTY CHANNELS
	012402	016301	060006		INTYSB:	MOV RSTA(R3),R1
	012406	016161	000004	000000		MOV RI.BEG(R1),RI.PTR(R1)
	012414	016161	000004	000006		MOV RI.BEG(R1),RI.LIM(R1)
	012422	016161	000016	000012		MOV RO.BEG(R1),RO.PTR(R1)
	012430	016161	000016	000020		MOV RO.BEG(R1),RO.LIM(R1)
	012436	005061	000030			CLR RI.BLK(R1)
	012442	005061	000032			CLR RO.BLK(R1)
	012446	005061	000034			CLR MR.BLK(R1)
	012452	005061	000036			CLR CG.BLK(R1)
	012456	005061	000046			CLR RO.ESF(R1)
	012462	005061	000052			CLR JMPESC(R1)
	012466	016361	060424	000050		MOV ESCHTB(R3),RO.ESC(R1)
	012474	016371	002200	000010		MOV SRTY(R3),@RI.FLG(R1)
					;	MOV SRAL(R3),@AL.FLG(R1)	; GOING TO BE FLAGGED ANYWAY
	012502	005063	060152			CLR ALNUM(R3)
	012506	012773	000005	057756		MOV #5,@MCNT(R3)		; MOVE WORD COUNT OF MESSAGE INTO PLACE
	012514	005061	000044			CLR RS.CNT(R1)
	012520	016361	060026	000042		MOV RSTR(R3),RS.PTR(R1)
	012526	005061	000056			CLR COL(R1)
	012532	005061	000054			CLR ROW(R1)
	012536	016301	060016			MOV TSTA(R3),R1
	012542	016161	000004	000000		MOV TI.BEG(R1),TI.PTR(R1)
	012550	016161	000004	000006		MOV TI.BEG(R1),TI.LIM(R1)
	012556	005061	000030			CLR TI.BLK(R1)
	012562	005061	000034			CLR MT.BLK(R1)
	012566	005061	000036			CLR AL.BLK(R1)
	012572	016371	002210	000010		MOV STTY(R3),@TI.FLG(R1)
	012600	016371	002230	000022		MOV STCG(R3),@CG.FLG(R1)
						CALL ALLCSB
	012606	004767	000042			JSR PC,ALLCSB
	012612	016361	060036	000042		MOV TSTR(R3),TS.PTR(R1)
	012620	005061	000044			CLR TS.CNT(R1)
					;	MOV TS.PTR(R1),R0
					;	MOV #37,(R0)+		; CLEAR THE SCREEN INITIALLY ON ALL TTYS BY ^_L
					;	MOV #114,(R0)
					;	MOV #2,TS.CNT(R1)
					;	CLRB @TI.FLG(R1)
	012624	016373	060116	057776		MOV ALZM(R3),@ALCP(R3)		; MOVE ALLOCATION POINTER INTO PLACE
	012632	000173	012636			JMP @INSPTB(R3)			; JCALL TERMINAL DEPENDANT ROUTINES
					
					
	012636	012400			INSPTB:	.WORD NULLSB
	012640	012400				.WORD NULLSB
	012642	012400				.WORD NULLSB
	012644	012730				.WORD INGLSB
	012646	012400				.WORD NULLSB
	012650	012400				.WORD NULLSB
	012652	012400				.WORD NULLSB
					
					ALLCSB:	PUSH <R5,R1>
					.IRP Y,<R5,R1>
						MOV Y,-(SP)
					.ENDM
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 73
	GLPT;R11MUX 103	PAGE 1.72 	ROUTINES FOR INTIALIZING TTY CHANNELS

	012654	010546				MOV R5,-(SP)
	012656	010146				MOV R1,-(SP)
	012660	016301	060006			MOV RSTA(R3),R1
	012664	112773	000137	060106		MOVB #ALCINC,@ALCI(R3)		;SET ALLOCATION
	012672	062763	000137	060152		ADD #ALCINC,ALNUM(R3)
	012700	016373	057766	057776		MOV ALCM(R3),@ALCP(R3)		;SET POINTER TO ALLOCATION
	012706	016305	060016			MOV TSTA(R3),R5			;GET POINTER TO TRANSMIT STATUS TABLE
	012712	005265	000034			INC MT.BLK(R5)			;BLOCK MAIN PROGRAM TRANSMIT CHAR PROCESSING
	012716	105071	000022			CLRB @AL.FLG(R1)		;AND SET FLAG
						POP <R1,R5>
					.IRP Y,<R1,R5>
						MOV (SP)+,Y
					.ENDM
	012722	012601				MOV (SP)+,R1
	012724	012605				MOV (SP)+,R5
						RET
	012726	000207				RTS PC
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 74
	GLPT;R11MUX 103	PAGE 1.73 	ROUTINES FOR INTIALIZING TTY CHANNELS

					INGLSB:
	012730	016767	046040	046030		MOV GLBEG,GLPTR		; INITALIZE GOULD DATA QUEUE POINTERS
	012736	016767	046032	046024		MOV GLBEG,GTPTR
	012744	016767	046024	046024		MOV GLBEG,GLLIM
	012752	016767	046016	046020		MOV GLBEG,GTLIM
	012760	016767	170020	167612		MOV SSTABR,STATBR	; FIX BRANCH FOR STATUS ROUTINE
	012766	016767	170014	167746		MOV SGLIBR,GLIBR	; FIX BRANCH FOR M.P. FAKERY OF GOULD INTERRUPT
	012774	012767	000005	046044		MOV #STLEN,STALEN
	013002	012767	061032	046034		MOV #STMSG,STAMSG
						.IRP VAL,<GLBLK,JMPFLG,REPFLG,GLERR,PAGMNG,QOTFLG,GRFFLG,CLKCNT,GLDALC>
						CLR VAL
					.ENDM
	013010	005067	045766			CLR GLBLK
	013014	005067	045766			CLR JMPFLG
	013020	005067	045764			CLR REPFLG
	013024	005067	045774			CLR GLERR
	013030	005067	045772			CLR PAGMNG
	013034	005067	045720			CLR QOTFLG
	013040	005067	045716			CLR GRFFLG
	013044	005067	170242			CLR CLKCNT
	013050	005067	045774			CLR GLDALC
	013054	012767	000001	045740		MOV #1,GLIDL
	013062	012767	004500	045714		MOV #CMIDEC,GLIPTR
	013070	012767	007130	045652		MOV #CHRDEC,GLDPND
	013076	012767	007314	045646		MOV #MAKWD1,WRDPTR
	013104	012767	007350	045642		MOV #DATDEC,GLDPTR
	013112	112767	000177	045714		MOVB #177,STAPAG
	013120	012767	000001	045630		MOV #1,EODFLG
	013126	012737	000004	166000		MOV #%GCOFF,@#GLDCSR	; DISABLE THE PRINTER TO CLEAR ANY OLD INTERRUPTS
	013134	012737	000006	166000		MOV #%GCION,@#GLDCSR	; ENABLE GOULD INTERRUPTS
						RET	
	013142	000207				RTS PC
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 75
	GLPT;R11MUX 103	PAGE 1.74 	AI KEYBOARD TABLES

					.SBTTL AI KEYBOARD TABLES
					
					;WHAT FOLLOWS IS THE GRAND CHARACTER CONVERSION TABLE
					
					;AN 8 BIT QUANTITY IS USED TO INDEX INTO THE XTAB
					;	0-5	KEYBOARD KEY NUMBER
					;	  6	SHIFT
					;	  7	TOP 
					
					;IF THE BYTE PICKED IS NEGATIVE, YOU HAVE STRUCK A KEY THAT DOES NOT
					;HAVE AN ASCII CODE.  THESE CODES ARE ASSIGNED AS FOLLOWS:
					
	013144	007012			AINASC:	NONAS1	;	200	ILLEGAL
	013146	007012				KBRK	;	201	BREAK
	013150	007016				KESC	;	202	ESCAPE
	013152	007016				KCALL	;	203	CALL
	013154	007016				KCLEAR	;	204	CLEAR
	013156	007016				KDEL	;	205	CAP DELTA
	013160	007016				KCIRM	;	206	CIRCLE MINUS
	013162	007016				KGRAD	;	207	DEL
	013164	007016				KCIRP	;	210	CIRCLE PLUS
	013166	007016				KBACK	;	211	BACK
	013170	007016				KNEXT	;	212	NEXT
	013172	007016				KHELP	;	213	HELP
	013174	007016				KFORM	;	214	FORM
	013176	007016				KBS	;	215	BACK SPACE
	013200	007016				KVT	;	216	VERTICAL TAB
	013202	007016				KCR	;	217	CRLF AND BS
	013204	007016				KLINE	;	220	LF OR DNAR
	013206	007016				FDELT	;	221	FORWARD DELETE
	013210	007016				KRPT	;	222	KBD REPEAT
	013212	007016				KTAB	;	223	TAB
	013214	007016				KSPACE	;	224	SPACE
					
		000051			NATEND==<.-AINASC>-1	;MAXIMUM # NON-ASCII CHARACTERS
					
					; SHIFT+TOP CURRENT IDENTICAL TO TOP
					.MACRO KBDKEY KEY,CHAR,SHIFTC,TOPC,SHTOPC
						.BYTE CHAR,SHIFTC,TOPC,SHTOPC
					.ENDM
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 76
	GLPT;R11MUX 103	PAGE 1.75 	AI KEYBOARD TABLES

					
					AIKTAB:
					KBDKEY	0,	201,	201,	201,	201	;BREAK
	013216	   201		
	013217	   201		
	013220	   201		
	013221	   201				.BYTE 	201,	201,	201,	201
					KBDKEY	1,	202,	202,	202,	202	;ESCAPE
	013222	   202		
	013223	   202		
	013224	   202		
	013225	   202				.BYTE 	202,	202,	202,	202
					KBDKEY	2,	'1,	'!,	222,	222
	013226	   061		
	013227	   041		
	013230	   222		
	013231	   222				.BYTE 	'1,	'!,	222,	222
					KBDKEY	3,	'2,	'",	222,	222
	013232	   062		
	013233	   042		
	013234	   222		
	013235	   222				.BYTE 	'2,	'",	222,	222
					KBDKEY	4,	'3,	'#,	222,	222
	013236	   063		
	013237	   043		
	013240	   222		
	013241	   222				.BYTE 	'3,	'#,	222,	222
					KBDKEY	5,	'4,	'$,	222,	222
	013242	   064		
	013243	   044		
	013244	   222		
	013245	   222				.BYTE 	'4,	'$,	222,	222
					KBDKEY	6,	'5,	'%,	222,	222
	013246	   065		
	013247	   045		
	013250	   222		
	013251	   222				.BYTE 	'5,	'%,	222,	222
					KBDKEY	7,	'6,	'&,	222,	222
	013252	   066		
	013253	   046		
	013254	   222		
	013255	   222				.BYTE 	'6,	'&,	222,	222
					KBDKEY	10,	'7,	'',	222,	222
	013256	   067		
	013257	   047		
	013260	   222		
	013261	   222				.BYTE 	'7,	'',	222,	222
					KBDKEY	11,	'8,	'(,	222,	222
	013262	   070		
	013263	   050		
	013264	   222		
	013265	   222				.BYTE 	'8,	'(,	222,	222
					KBDKEY	12,	'9,	'),	222,	222
	013266	   071		
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 77
	GLPT;R11MUX 103	PAGE 1.76 	AI KEYBOARD TABLES

	013267	   051		
	013270	   222		
	013271	   222				.BYTE 	'9,	'),	222,	222
					KBDKEY	13,	'0,	'_,	222,	222
	013272	   060		
	013273	   137		
	013274	   222		
	013275	   222				.BYTE 	'0,	'_,	222,	222
					KBDKEY	14,	'-,	'=,	'=,	'=
	013276	   055		
	013277	   075		
	013300	   075		
	013301	   075				.BYTE 	'-,	'=,	'=,	'=
					KBDKEY	15,	'@,	'`,	'`,	'`
	013302	   100		
	013303	   140		
	013304	   140		
	013305	   140				.BYTE 	'@,	'`,	'`,	'`
					KBDKEY	16,	'^,	'~,	'~,	'~
	013306	   136		
	013307	   176		
	013310	   176		
	013311	   176				.BYTE 	'^,	'~,	'~,	'~
					KBDKEY	17,	10,	215,	215,	215	;BACK SPACE
	013312	   010		
	013313	   215		
	013314	   215		
	013315	   215				.BYTE 	10,	215,	215,	215
					KBDKEY	20,	32,	203,	203,	203	;CALL
	013316	   032		
	013317	   203		
	013320	   203		
	013321	   203				.BYTE 	32,	203,	203,	203
					KBDKEY	21,	14,	204,	204,	204	;CLEAR
	013322	   014		
	013323	   204		
	013324	   204		
	013325	   204				.BYTE 	14,	204,	204,	204
					KBDKEY	22,	11,	223,	223,	223	;TAB
	013326	   011		
	013327	   223		
	013330	   223		
	013331	   223				.BYTE 	11,	223,	223,	223
					KBDKEY	23,	33,	33,	33,	33	;ALT-MODE
	013332	   033		
	013333	   033		
	013334	   033		
	013335	   033				.BYTE 	33,	33,	33,	33
					KBDKEY	24,	'q,	'Q,	4,	4,	;and
	013336	   161		
	013337	   121		
	013340	   004		
	013341	   004				.BYTE 	'q,	'Q,	4,	4
					KBDKEY	25,	'w,	'W,	37,	37	;or
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 78
	GLPT;R11MUX 103	PAGE 1.77 	AI KEYBOARD TABLES

	013342	   167		
	013343	   127		
	013344	   037		
	013345	   037				.BYTE 	'w,	'W,	37,	37
					KBDKEY	26,	'e,	'E,	22,	22	;intersection
	013346	   145		
	013347	   105		
	013350	   022		
	013351	   022				.BYTE 	'e,	'E,	22,	22
					KBDKEY	27,	'r,	'R,	23,	23	;union
	013352	   162		
	013353	   122		
	013354	   023		
	013355	   023				.BYTE 	'r,	'R,	23,	23
					KBDKEY	30,	't,	'T,	20,	20	;subset
	013356	   164		
	013357	   124		
	013360	   020		
	013361	   020				.BYTE 	't,	'T,	20,	20
					KBDKEY	31,	'y,	'Y,	21,	21	;superset
	013362	   171		
	013363	   131		
	013364	   021		
	013365	   021				.BYTE 	'y,	'Y,	21,	21
					KBDKEY	32,	'u,	'U,	5,	5	;not
	013366	   165		
	013367	   125		
	013370	   005		
	013371	   005				.BYTE 	'u,	'U,	5,	5
					KBDKEY	33,	'i,	'I,	26,	26	;xor
	013372	   151		
	013373	   111		
	013374	   026		
	013375	   026				.BYTE 	'i,	'I,	26,	26
					KBDKEY	34,	'o,	'O,	1,	1	;down arrow
	013376	   157		
	013377	   117		
	013400	   001		
	013401	   001				.BYTE 	'o,	'O,	1,	1
					KBDKEY	35,	'p,	'P,	13,	13	;up arrow
	013402	   160		
	013403	   120		
	013404	   013		
	013405	   013				.BYTE 	'p,	'P,	13,	13
					KBDKEY	36,	'[,	'{,	'{,	'{
	013406	   133		
	013407	   173		
	013410	   173		
	013411	   173				.BYTE 	'[,	'{,	'{,	'{
					KBDKEY	37,	'],	'},	'},	'}
	013412	   135		
	013413	   175		
	013414	   175		
	013415	   175				.BYTE 	'],	'},	'},	'}
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 79
	GLPT;R11MUX 103	PAGE 1.78 	AI KEYBOARD TABLES

					KBDKEY	40,	'\,	'|,	'|,	'|
	013416	   134		
	013417	   174		
	013420	   174		
	013421	   174				.BYTE 	'\,	'|,	'|,	'|
					KBDKEY	41,	'/,	16,	16,	16	;infinity
	013422	   057		
	013423	   016		
	013424	   016		
	013425	   016				.BYTE 	'/,	16,	16,	16
					KBDKEY	42,	206,	206,	205,	205	;circle minus, cap delta
	013426	   206		
	013427	   206		
	013430	   205		
	013431	   205				.BYTE 	206,	206,	205,	205
					KBDKEY	43,	210,	210,	207,	207	;circle plus, cap del
	013432	   210		
	013433	   210		
	013434	   207		
	013435	   207				.BYTE 	210,	210,	207,	207
					KBDKEY	44,	14,	214,	214,	214	;form
	013436	   014		
	013437	   214		
	013440	   214		
	013441	   214				.BYTE 	14,	214,	214,	214
					KBDKEY	45,	13,	216,	216,	216	;vertical tab
	013442	   013		
	013443	   216		
	013444	   216		
	013445	   216				.BYTE 	13,	216,	216,	216
					KBDKEY	46,	177,	177,	221,	221	;rubout
	013446	   177		
	013447	   177		
	013450	   221		
	013451	   221				.BYTE 	177,	177,	221,	221
					KBDKEY	47,	'a,	'A,	34,	34	;.leq.
	013452	   141		
	013453	   101		
	013454	   034		
	013455	   034				.BYTE 	'a,	'A,	34,	34
					KBDKEY	50,	's,	'S,	35,	35	;.geq
	013456	   163		
	013457	   123		
	013460	   035		
	013461	   035				.BYTE 	's,	'S,	35,	35
					KBDKEY	51,	'd,	'D,	36,	36	;equivalence
	013462	   144		
	013463	   104		
	013464	   036		
	013465	   036				.BYTE 	'd,	'D,	36,	36
					KBDKEY	52,	'f,	'F,	17,	17	;delta (partial derivative)
	013466	   146		
	013467	   106		
	013470	   017		
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 80
	GLPT;R11MUX 103	PAGE 1.79 	AI KEYBOARD TABLES

	013471	   017				.BYTE 	'f,	'F,	17,	17
					KBDKEY	53,	'g,	'G,	32,	32	;not equals
	013472	   147		
	013473	   107		
	013474	   032		
	013475	   032				.BYTE 	'g,	'G,	32,	32
					KBDKEY	54,	'h,	'H,	213,	213	;HELP!!!!!
	013476	   150		
	013477	   110		
	013500	   213		
	013501	   213				.BYTE 	'h,	'H,	213,	213
					KBDKEY	55,	'j,	'J,	30,	30	;back arrow
	013502	   152		
	013503	   112		
	013504	   030		
	013505	   030				.BYTE 	'j,	'J,	30,	30
					KBDKEY	56,	'k,	'K,	31,	31	;forward arrow
	013506	   153		
	013507	   113		
	013510	   031		
	013511	   031				.BYTE 	'k,	'K,	31,	31
					KBDKEY	57,	'l,	'L,	27,	27	;both ways arrow
	013512	   154		
	013513	   114		
	013514	   027		
	013515	   027				.BYTE 	'l,	'L,	27,	27
					KBDKEY	60,	73,	'+,	'+,	'+	; ";"
	013516	   073		
	013517	   053		
	013520	   053		
	013521	   053				.BYTE 	73,	'+,	'+,	'+
					KBDKEY	61,	':,	'*,	'*,	'*
	013522	   072		
	013523	   052		
	013524	   052		
	013525	   052				.BYTE 	':,	'*,	'*,	'*
					KBDKEY	62,	15,	217,	217,	217	;carriage return
	013526	   015		
	013527	   217		
	013530	   217		
	013531	   217				.BYTE 	15,	217,	217,	217
					KBDKEY	63,	12,	220,	220,	220	;line feed
	013532	   012		
	013533	   220		
	013534	   220		
	013535	   220				.BYTE 	12,	220,	220,	220
					KBDKEY	64,	37,	212,	211,	211	;next, back
	013536	   037		
	013537	   212		
	013540	   211		
	013541	   211				.BYTE 	37,	212,	211,	211
					KBDKEY	65,	'z,	'Z,	2,	2	;alpha
	013542	   172		
	013543	   132		
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 81
	GLPT;R11MUX 103	PAGE 1.80 	AI KEYBOARD TABLES

	013544	   002		
	013545	   002				.BYTE 	'z,	'Z,	2,	2
					KBDKEY	66,	'x,	'X,	3,	3	;beta
	013546	   170		
	013547	   130		
	013550	   003		
	013551	   003				.BYTE 	'x,	'X,	3,	3
					KBDKEY	67,	'c,	'C,	6,	6	;epsilon
	013552	   143		
	013553	   103		
	013554	   006		
	013555	   006				.BYTE 	'c,	'C,	6,	6
					KBDKEY	70,	'v,	'V,	10,	10	;lambda
	013556	   166		
	013557	   126		
	013560	   010		
	013561	   010				.BYTE 	'v,	'V,	10,	10
					KBDKEY	71,	'b,	'B,	7,	7	;pi
	013562	   142		
	013563	   102		
	013564	   007		
	013565	   007				.BYTE 	'b,	'B,	7,	7
					KBDKEY	72,	'n,	'N,	24,	24	;for all
	013566	   156		
	013567	   116		
	013570	   024		
	013571	   024				.BYTE 	'n,	'N,	24,	24
					KBDKEY	73,	'm,	'M,	25,	25	;there exists
	013572	   155		
	013573	   115		
	013574	   025		
	013575	   025				.BYTE 	'm,	'M,	25,	25
					KBDKEY	74,	54,	74,	74,	74	; <
	013576	   054		
	013577	   074		
	013600	   074		
	013601	   074				.BYTE 	54,	74,	74,	74
					KBDKEY	75,	'.,	76,	76,	76	; >
	013602	   056		
	013603	   076		
	013604	   076		
	013605	   076				.BYTE 	'.,	76,	76,	76
					KBDKEY	76,	'/,	'?,	'?,	'?	; ?
	013606	   057		
	013607	   077		
	013610	   077		
	013611	   077				.BYTE 	'/,	'?,	'?,	'?
					KBDKEY	77,	40,	224,	222,	222	;space
	013612	   040		
	013613	   224		
	013614	   222		
	013615	   222				.BYTE 	40,	224,	222,	222
					
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 82
	GLPT;R11MUX 103	PAGE 1.81 	TTY TABLES AND BUFFERS FOR TTYS

					.SBTTL TTY TABLES AND BUFFERS FOR TTYS
					
					;  ADDRESS AND VALUE TABLES FOR MAIN PROGRAM SUBROUTINE CALLS 
					
					.IRP NAM,<MCNT,ALCM,ALCP,RSTA,TSTA,RIBF,ROBF,TIBF,RSTR,TSTR>
					VALCRE NAM,MAXTTY
					.ENDM
					VALCRE MCNT,MAXTTY
		000004				.REPT MAXTTY
						MCNTMC \.RPCNT,\.RPCNT+1
					.ENDR
						MCNTMC \.RPCNT,\.RPCNT+1
	013616	000003			MCNT0:	.WORD 3		; MACRO FOR STORAGE OF COUNT OF MESSAGE
						MCNTMC \.RPCNT,\.RPCNT+1
	013620	000003			MCNT1:	.WORD 3		; MACRO FOR STORAGE OF COUNT OF MESSAGE
						MCNTMC \.RPCNT,\.RPCNT+1
	013622	000003			MCNT2:	.WORD 3		; MACRO FOR STORAGE OF COUNT OF MESSAGE
						MCNTMC \.RPCNT,\.RPCNT+1
	013624	000003			MCNT3:	.WORD 3		; MACRO FOR STORAGE OF COUNT OF MESSAGE
					VALCRE ALCM,MAXTTY
		000004				.REPT MAXTTY
						ALCMMC \.RPCNT,\.RPCNT+1
					.ENDR
						ALCMMC \.RPCNT,\.RPCNT+1
	013626	   200		
	013627	   034			ALZM0:	.BYTE 200+0,34	; ^\
	013630	   200		
	013631	   032					.BYTE 200+0,32	; ^Z
	013632	   200		
	013633	   034			ALCM0:	.BYTE 200+0,34	; ^\
	013634	   200		
	013635	   001					.BYTE 200+0,1	; ^A
	013636	   200		
	013637	   000					.BYTE 200+0,0	; ALLOCATION
		013637			ALCI0==.-1
						ALCMMC \.RPCNT,\.RPCNT+1
	013640	   201		
	013641	   034			ALZM1:	.BYTE 200+1,34	; ^\
	013642	   201		
	013643	   032					.BYTE 200+1,32	; ^Z
	013644	   201		
	013645	   034			ALCM1:	.BYTE 200+1,34	; ^\
	013646	   201		
	013647	   001					.BYTE 200+1,1	; ^A
	013650	   201		
	013651	   000					.BYTE 200+1,0	; ALLOCATION
		013651			ALCI1==.-1
						ALCMMC \.RPCNT,\.RPCNT+1
	013652	   202		
	013653	   034			ALZM2:	.BYTE 200+2,34	; ^\
	013654	   202		
	013655	   032					.BYTE 200+2,32	; ^Z
	013656	   202		
	013657	   034			ALCM2:	.BYTE 200+2,34	; ^\
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 83
	GLPT;R11MUX 103	PAGE 1.82 	TTY TABLES AND BUFFERS FOR TTYS

	013660	   202		
	013661	   001					.BYTE 200+2,1	; ^A
	013662	   202		
	013663	   000					.BYTE 200+2,0	; ALLOCATION
		013663			ALCI2==.-1
						ALCMMC \.RPCNT,\.RPCNT+1
	013664	   203		
	013665	   034			ALZM3:	.BYTE 200+3,34	; ^\
	013666	   203		
	013667	   032					.BYTE 200+3,32	; ^Z
	013670	   203		
	013671	   034			ALCM3:	.BYTE 200+3,34	; ^\
	013672	   203		
	013673	   001					.BYTE 200+3,1	; ^A
	013674	   203		
	013675	   000					.BYTE 200+3,0	; ALLOCATION
		013675			ALCI3==.-1
					VALCRE ALCP,MAXTTY
		000004				.REPT MAXTTY
						ALCPMC \.RPCNT,\.RPCNT+1
					.ENDR
						ALCPMC \.RPCNT,\.RPCNT+1
	013676	013632			ALCP0:	.WORD ALCM0	; MACRO FOR STORAGE OF MESSAGE POINTER
						ALCPMC \.RPCNT,\.RPCNT+1
	013700	013644			ALCP1:	.WORD ALCM1	; MACRO FOR STORAGE OF MESSAGE POINTER
						ALCPMC \.RPCNT,\.RPCNT+1
	013702	013656			ALCP2:	.WORD ALCM2	; MACRO FOR STORAGE OF MESSAGE POINTER
						ALCPMC \.RPCNT,\.RPCNT+1
	013704	013670			ALCP3:	.WORD ALCM3	; MACRO FOR STORAGE OF MESSAGE POINTER
					VALCRE RSTA,MAXTTY
		000004				.REPT MAXTTY
						RSTAMC \.RPCNT,\.RPCNT+1
					.ENDR
						RSTAMC \.RPCNT,\.RPCNT+1
	013706	014436			RSTA0:	.WORD RIBF0		; RI.PTR
	013710	014736				.WORD RIBF0+RIBFLN		; RI.END
	013712	014436				.WORD RIBF0			; RI.BEG
	013714	014436				.WORD RIBF0			; RI.LIM
	013716	002274				.WORD MRTY0			; RI.FLG
	013720	016036				.WORD ROBF0			; RO.PTR
	013722	016336				.WORD ROBF0+ROBFLN		; RO.END
	013724	016036				.WORD ROBF0			; RO.BEG
	013726	016036				.WORD ROBF0			; RO.LIM
	013730	002312				.WORD MRAL0			; AL.FLAG
	013732	   000		
	013733	   200		
	013734	   000		
	013735	   000				.BYTE 0,200+0,0,0		; TTYNUM
	013736	000000				.WORD 0				; RI.BLK
	013740	000000				.WORD 0				; RO.BLK
	013742	000000				.WORD 0				; MR.BLK
	013744	000000				.WORD 0				; CG.BLK
	013746	000000				.WORD 0				; R.FLGS
	013750	017636				.WORD RSTR0			; RS.PTR
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 84
	GLPT;R11MUX 103	PAGE 1.83 	TTY TABLES AND BUFFERS FOR TTYS

	013752	000000				.WORD 0				; RS.CNT
	013754	000000				.WORD 0				; RO.ESF
	013756	177777				.WORD -1			; RO.ESC
	013760	000000				.WORD 0				; JMPESC
	013762	000000				.WORD 0				; ROW
	013764	000000				.WORD 0				; COL
					
						RSTAMC \.RPCNT,\.RPCNT+1
	013766	014736			RSTA1:	.WORD RIBF1		; RI.PTR
	013770	015236				.WORD RIBF1+RIBFLN		; RI.END
	013772	014736				.WORD RIBF1			; RI.BEG
	013774	014736				.WORD RIBF1			; RI.LIM
	013776	002330				.WORD MRTY1			; RI.FLG
	014000	016336				.WORD ROBF1			; RO.PTR
	014002	016636				.WORD ROBF1+ROBFLN		; RO.END
	014004	016336				.WORD ROBF1			; RO.BEG
	014006	016336				.WORD ROBF1			; RO.LIM
	014010	002346				.WORD MRAL1			; AL.FLAG
	014012	   000		
	014013	   201		
	014014	   000		
	014015	   000				.BYTE 0,200+1,0,0		; TTYNUM
	014016	000000				.WORD 0				; RI.BLK
	014020	000000				.WORD 0				; RO.BLK
	014022	000000				.WORD 0				; MR.BLK
	014024	000000				.WORD 0				; CG.BLK
	014026	000000				.WORD 0				; R.FLGS
	014030	027636				.WORD RSTR1			; RS.PTR
	014032	000000				.WORD 0				; RS.CNT
	014034	000000				.WORD 0				; RO.ESF
	014036	177777				.WORD -1			; RO.ESC
	014040	000000				.WORD 0				; JMPESC
	014042	000000				.WORD 0				; ROW
	014044	000000				.WORD 0				; COL
					
						RSTAMC \.RPCNT,\.RPCNT+1
	014046	015236			RSTA2:	.WORD RIBF2		; RI.PTR
	014050	015536				.WORD RIBF2+RIBFLN		; RI.END
	014052	015236				.WORD RIBF2			; RI.BEG
	014054	015236				.WORD RIBF2			; RI.LIM
	014056	002364				.WORD MRTY2			; RI.FLG
	014060	016636				.WORD ROBF2			; RO.PTR
	014062	017136				.WORD ROBF2+ROBFLN		; RO.END
	014064	016636				.WORD ROBF2			; RO.BEG
	014066	016636				.WORD ROBF2			; RO.LIM
	014070	002402				.WORD MRAL2			; AL.FLAG
	014072	   000		
	014073	   202		
	014074	   000		
	014075	   000				.BYTE 0,200+2,0,0		; TTYNUM
	014076	000000				.WORD 0				; RI.BLK
	014100	000000				.WORD 0				; RO.BLK
	014102	000000				.WORD 0				; MR.BLK
	014104	000000				.WORD 0				; CG.BLK
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 85
	GLPT;R11MUX 103	PAGE 1.84 	TTY TABLES AND BUFFERS FOR TTYS

	014106	000000				.WORD 0				; R.FLGS
	014110	037636				.WORD RSTR2			; RS.PTR
	014112	000000				.WORD 0				; RS.CNT
	014114	000000				.WORD 0				; RO.ESF
	014116	177777				.WORD -1			; RO.ESC
	014120	000000				.WORD 0				; JMPESC
	014122	000000				.WORD 0				; ROW
	014124	000000				.WORD 0				; COL
					
						RSTAMC \.RPCNT,\.RPCNT+1
	014126	015536			RSTA3:	.WORD RIBF3		; RI.PTR
	014130	016036				.WORD RIBF3+RIBFLN		; RI.END
	014132	015536				.WORD RIBF3			; RI.BEG
	014134	015536				.WORD RIBF3			; RI.LIM
	014136	002240				.WORD MRTY3			; RI.FLG
	014140	017136				.WORD ROBF3			; RO.PTR
	014142	017436				.WORD ROBF3+ROBFLN		; RO.END
	014144	017136				.WORD ROBF3			; RO.BEG
	014146	017136				.WORD ROBF3			; RO.LIM
	014150	002256				.WORD MRAL3			; AL.FLAG
	014152	   000		
	014153	   203		
	014154	   000		
	014155	   000				.BYTE 0,200+3,0,0		; TTYNUM
	014156	000000				.WORD 0				; RI.BLK
	014160	000000				.WORD 0				; RO.BLK
	014162	000000				.WORD 0				; MR.BLK
	014164	000000				.WORD 0				; CG.BLK
	014166	000000				.WORD 0				; R.FLGS
	014170	047636				.WORD RSTR3			; RS.PTR
	014172	000000				.WORD 0				; RS.CNT
	014174	000000				.WORD 0				; RO.ESF
	014176	177777				.WORD -1			; RO.ESC
	014200	000000				.WORD 0				; JMPESC
	014202	000000				.WORD 0				; ROW
	014204	000000				.WORD 0				; COL
					
					VALCRE TSTA,MAXTTY
		000004				.REPT MAXTTY
						TSTAMC \.RPCNT,\.RPCNT+1
					.ENDR
						TSTAMC \.RPCNT,\.RPCNT+1
	014206	017436			TSTA0:	.WORD TIBF0
	014210	017476				.WORD TIBF0+TIBFLN
	014212	017436				.WORD TIBF0
	014214	017436				.WORD TIBF0
	014216	002420				.WORD MTTY0
	014220	060412				.WORD TDST0+OD.PTR	;INDIRECT POINTER
	014222	060414				.WORD TDST0+OD.END	;INDIRECT POINTER
	014224	060416				.WORD TDST0+OD.BEG	;INDIRECT POINTER
	014226	060420				.WORD TDST0+OD.LIM	;INDIRECT POINTER
	014230	002436				.WORD MTCG0
	014232	   000		
	014233	   200		
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 86
	GLPT;R11MUX 103	PAGE 1.85 	TTY TABLES AND BUFFERS FOR TTYS

	014234	   000		
	014235	   000				.BYTE 0,200+0,0,0
	014236	000000				.WORD 0
	014240	060422				.WORD TDST0+OD.BLK	;INDIRECT POINTER
	014242	000000				.WORD 0
	014244	000000				.WORD 0
	014246	000000				.WORD 0
	014250	057636				.WORD TSTR0
	014252	000000				.WORD 0
						TSTAMC \.RPCNT,\.RPCNT+1
	014254	017476			TSTA1:	.WORD TIBF1
	014256	017536				.WORD TIBF1+TIBFLN
	014260	017476				.WORD TIBF1
	014262	017476				.WORD TIBF1
	014264	002454				.WORD MTTY1
	014266	060412				.WORD TDST0+OD.PTR	;INDIRECT POINTER
	014270	060414				.WORD TDST0+OD.END	;INDIRECT POINTER
	014272	060416				.WORD TDST0+OD.BEG	;INDIRECT POINTER
	014274	060420				.WORD TDST0+OD.LIM	;INDIRECT POINTER
	014276	002472				.WORD MTCG1
	014300	   000		
	014301	   201		
	014302	   000		
	014303	   000				.BYTE 0,200+1,0,0
	014304	000000				.WORD 0
	014306	060422				.WORD TDST0+OD.BLK	;INDIRECT POINTER
	014310	000000				.WORD 0
	014312	000000				.WORD 0
	014314	000000				.WORD 0
	014316	057662				.WORD TSTR1
	014320	000000				.WORD 0
						TSTAMC \.RPCNT,\.RPCNT+1
	014322	017536			TSTA2:	.WORD TIBF2
	014324	017576				.WORD TIBF2+TIBFLN
	014326	017536				.WORD TIBF2
	014330	017536				.WORD TIBF2
	014332	002510				.WORD MTTY2
	014334	060412				.WORD TDST0+OD.PTR	;INDIRECT POINTER
	014336	060414				.WORD TDST0+OD.END	;INDIRECT POINTER
	014340	060416				.WORD TDST0+OD.BEG	;INDIRECT POINTER
	014342	060420				.WORD TDST0+OD.LIM	;INDIRECT POINTER
	014344	002526				.WORD MTCG2
	014346	   000		
	014347	   202		
	014350	   000		
	014351	   000				.BYTE 0,200+2,0,0
	014352	000000				.WORD 0
	014354	060422				.WORD TDST0+OD.BLK	;INDIRECT POINTER
	014356	000000				.WORD 0
	014360	000000				.WORD 0
	014362	000000				.WORD 0
	014364	057706				.WORD TSTR2
	014366	000000				.WORD 0
						TSTAMC \.RPCNT,\.RPCNT+1
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 87
	GLPT;R11MUX 103	PAGE 1.86 	TTY TABLES AND BUFFERS FOR TTYS

	014370	017576			TSTA3:	.WORD TIBF3
	014372	017636				.WORD TIBF3+TIBFLN
	014374	017576				.WORD TIBF3
	014376	017576				.WORD TIBF3
	014400	002544				.WORD MTTY3
	014402	060412				.WORD TDST0+OD.PTR	;INDIRECT POINTER
	014404	060414				.WORD TDST0+OD.END	;INDIRECT POINTER
	014406	060416				.WORD TDST0+OD.BEG	;INDIRECT POINTER
	014410	060420				.WORD TDST0+OD.LIM	;INDIRECT POINTER
	014412	002562				.WORD MTCG3
	014414	   000		
	014415	   203		
	014416	   000		
	014417	   000				.BYTE 0,200+3,0,0
	014420	000000				.WORD 0
	014422	060422				.WORD TDST0+OD.BLK	;INDIRECT POINTER
	014424	000000				.WORD 0
	014426	000000				.WORD 0
	014430	000000				.WORD 0
	014432	057732				.WORD TSTR3
	014434	000000				.WORD 0
					VALCRE RIBF,MAXTTY
		000004				.REPT MAXTTY
						RIBFMC \.RPCNT,\.RPCNT+1
					.ENDR
						RIBFMC \.RPCNT,\.RPCNT+1
		014736			RIBF0:	.BLKW RIBFLN/2
						RIBFMC \.RPCNT,\.RPCNT+1
		015236			RIBF1:	.BLKW RIBFLN/2
						RIBFMC \.RPCNT,\.RPCNT+1
		015536			RIBF2:	.BLKW RIBFLN/2
						RIBFMC \.RPCNT,\.RPCNT+1
		016036			RIBF3:	.BLKW RIBFLN/2
					VALCRE ROBF,MAXTTY
		000004				.REPT MAXTTY
						ROBFMC \.RPCNT,\.RPCNT+1
					.ENDR
						ROBFMC \.RPCNT,\.RPCNT+1
		016336			ROBF0:	.BLKW ROBFLN/2
						ROBFMC \.RPCNT,\.RPCNT+1
		016636			ROBF1:	.BLKW ROBFLN/2
						ROBFMC \.RPCNT,\.RPCNT+1
		017136			ROBF2:	.BLKW ROBFLN/2
						ROBFMC \.RPCNT,\.RPCNT+1
		017436			ROBF3:	.BLKW ROBFLN/2
					VALCRE TIBF,MAXTTY
		000004				.REPT MAXTTY
						TIBFMC \.RPCNT,\.RPCNT+1
					.ENDR
						TIBFMC \.RPCNT,\.RPCNT+1
		017476			TIBF0:	.BLKW TIBFLN/2
						TIBFMC \.RPCNT,\.RPCNT+1
		017536			TIBF1:	.BLKW TIBFLN/2
						TIBFMC \.RPCNT,\.RPCNT+1
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 88
	GLPT;R11MUX 103	PAGE 1.87 	TTY TABLES AND BUFFERS FOR TTYS

		017576			TIBF2:	.BLKW TIBFLN/2
						TIBFMC \.RPCNT,\.RPCNT+1
		017636			TIBF3:	.BLKW TIBFLN/2
					VALCRE RSTR,MAXTTY
		000004				.REPT MAXTTY
						RSTRMC \.RPCNT,\.RPCNT+1
					.ENDR
						RSTRMC \.RPCNT,\.RPCNT+1
		027636			RSTR0:	.BLKW RSTRLN/2
						RSTRMC \.RPCNT,\.RPCNT+1
		037636			RSTR1:	.BLKW RSTRLN/2
						RSTRMC \.RPCNT,\.RPCNT+1
		047636			RSTR2:	.BLKW RSTRLN/2
						RSTRMC \.RPCNT,\.RPCNT+1
		057636			RSTR3:	.BLKW RSTRLN/2
					VALCRE TSTR,MAXTTY
		000004				.REPT MAXTTY
						TSTRMC \.RPCNT,\.RPCNT+1
					.ENDR
						TSTRMC \.RPCNT,\.RPCNT+1
		057662			TSTR0:	.BLKW TSTRLN/2
						TSTRMC \.RPCNT,\.RPCNT+1
		057706			TSTR1:	.BLKW TSTRLN/2
						TSTRMC \.RPCNT,\.RPCNT+1
		057732			TSTR2:	.BLKW TSTRLN/2
						TSTRMC \.RPCNT,\.RPCNT+1
		057756			TSTR3:	.BLKW TSTRLN/2
					
					.IRP NAM,<MCNT,ALCM,ALCP,RSTA,TSTA,RSTR,TSTR> ;MACRO TABLES
						ADRCRE NAM,MAXTTY
					.ENDM
						ADRCRE MCNT,MAXTTY
		000004			MCNT:	.REPT MAXTTY
						ADRMAC MCNT,\.RPCNT
					.ENDR
						ADRMAC MCNT,\.RPCNT
	057756	013616				.WORD MCNT0
						ADRMAC MCNT,\.RPCNT
	057760	013620				.WORD MCNT1
						ADRMAC MCNT,\.RPCNT
	057762	013622				.WORD MCNT2
						ADRMAC MCNT,\.RPCNT
	057764	013624				.WORD MCNT3
						ADRCRE ALCM,MAXTTY
		000004			ALCM:	.REPT MAXTTY
						ADRMAC ALCM,\.RPCNT
					.ENDR
						ADRMAC ALCM,\.RPCNT
	057766	013632				.WORD ALCM0
						ADRMAC ALCM,\.RPCNT
	057770	013644				.WORD ALCM1
						ADRMAC ALCM,\.RPCNT
	057772	013656				.WORD ALCM2
						ADRMAC ALCM,\.RPCNT
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 89
	GLPT;R11MUX 103	PAGE 1.88 	TTY TABLES AND BUFFERS FOR TTYS

	057774	013670				.WORD ALCM3
						ADRCRE ALCP,MAXTTY
		000004			ALCP:	.REPT MAXTTY
						ADRMAC ALCP,\.RPCNT
					.ENDR
						ADRMAC ALCP,\.RPCNT
	057776	013676				.WORD ALCP0
						ADRMAC ALCP,\.RPCNT
	060000	013700				.WORD ALCP1
						ADRMAC ALCP,\.RPCNT
	060002	013702				.WORD ALCP2
						ADRMAC ALCP,\.RPCNT
	060004	013704				.WORD ALCP3
						ADRCRE RSTA,MAXTTY
		000004			RSTA:	.REPT MAXTTY
						ADRMAC RSTA,\.RPCNT
					.ENDR
						ADRMAC RSTA,\.RPCNT
	060006	013706				.WORD RSTA0
						ADRMAC RSTA,\.RPCNT
	060010	013766				.WORD RSTA1
						ADRMAC RSTA,\.RPCNT
	060012	014046				.WORD RSTA2
						ADRMAC RSTA,\.RPCNT
	060014	014126				.WORD RSTA3
						ADRCRE TSTA,MAXTTY
		000004			TSTA:	.REPT MAXTTY
						ADRMAC TSTA,\.RPCNT
					.ENDR
						ADRMAC TSTA,\.RPCNT
	060016	014206				.WORD TSTA0
						ADRMAC TSTA,\.RPCNT
	060020	014254				.WORD TSTA1
						ADRMAC TSTA,\.RPCNT
	060022	014322				.WORD TSTA2
						ADRMAC TSTA,\.RPCNT
	060024	014370				.WORD TSTA3
						ADRCRE RSTR,MAXTTY
		000004			RSTR:	.REPT MAXTTY
						ADRMAC RSTR,\.RPCNT
					.ENDR
						ADRMAC RSTR,\.RPCNT
	060026	017636				.WORD RSTR0
						ADRMAC RSTR,\.RPCNT
	060030	027636				.WORD RSTR1
						ADRMAC RSTR,\.RPCNT
	060032	037636				.WORD RSTR2
						ADRMAC RSTR,\.RPCNT
	060034	047636				.WORD RSTR3
						ADRCRE TSTR,MAXTTY
		000004			TSTR:	.REPT MAXTTY
						ADRMAC TSTR,\.RPCNT
					.ENDR
						ADRMAC TSTR,\.RPCNT
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 90
	GLPT;R11MUX 103	PAGE 1.89 	TTY TABLES AND BUFFERS FOR TTYS

	060036	057636				.WORD TSTR0
						ADRMAC TSTR,\.RPCNT
	060040	057662				.WORD TSTR1
						ADRMAC TSTR,\.RPCNT
	060042	057706				.WORD TSTR2
						ADRMAC TSTR,\.RPCNT
	060044	057732				.WORD TSTR3
					.IRP NAM,<MRTY,MRAL,MTTY,MTCG,ALCI,ALZM>  ;PREDEFINED TABLES
						ADRCRE NAM,MAXTTY
					.ENDM
						ADRCRE MRTY,MAXTTY
		000004			MRTY:	.REPT MAXTTY
						ADRMAC MRTY,\.RPCNT
					.ENDR
						ADRMAC MRTY,\.RPCNT
	060046	002274				.WORD MRTY0
						ADRMAC MRTY,\.RPCNT
	060050	002330				.WORD MRTY1
						ADRMAC MRTY,\.RPCNT
	060052	002364				.WORD MRTY2
						ADRMAC MRTY,\.RPCNT
	060054	002240				.WORD MRTY3
						ADRCRE MRAL,MAXTTY
		000004			MRAL:	.REPT MAXTTY
						ADRMAC MRAL,\.RPCNT
					.ENDR
						ADRMAC MRAL,\.RPCNT
	060056	002312				.WORD MRAL0
						ADRMAC MRAL,\.RPCNT
	060060	002346				.WORD MRAL1
						ADRMAC MRAL,\.RPCNT
	060062	002402				.WORD MRAL2
						ADRMAC MRAL,\.RPCNT
	060064	002256				.WORD MRAL3
						ADRCRE MTTY,MAXTTY
		000004			MTTY:	.REPT MAXTTY
						ADRMAC MTTY,\.RPCNT
					.ENDR
						ADRMAC MTTY,\.RPCNT
	060066	002420				.WORD MTTY0
						ADRMAC MTTY,\.RPCNT
	060070	002454				.WORD MTTY1
						ADRMAC MTTY,\.RPCNT
	060072	002510				.WORD MTTY2
						ADRMAC MTTY,\.RPCNT
	060074	002544				.WORD MTTY3
						ADRCRE MTCG,MAXTTY
		000004			MTCG:	.REPT MAXTTY
						ADRMAC MTCG,\.RPCNT
					.ENDR
						ADRMAC MTCG,\.RPCNT
	060076	002436				.WORD MTCG0
						ADRMAC MTCG,\.RPCNT
	060100	002472				.WORD MTCG1
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 91
	GLPT;R11MUX 103	PAGE 1.90 	TTY TABLES AND BUFFERS FOR TTYS

						ADRMAC MTCG,\.RPCNT
	060102	002526				.WORD MTCG2
						ADRMAC MTCG,\.RPCNT
	060104	002562				.WORD MTCG3
						ADRCRE ALCI,MAXTTY
		000004			ALCI:	.REPT MAXTTY
						ADRMAC ALCI,\.RPCNT
					.ENDR
						ADRMAC ALCI,\.RPCNT
	060106	013637				.WORD ALCI0
						ADRMAC ALCI,\.RPCNT
	060110	013651				.WORD ALCI1
						ADRMAC ALCI,\.RPCNT
	060112	013663				.WORD ALCI2
						ADRMAC ALCI,\.RPCNT
	060114	013675				.WORD ALCI3
						ADRCRE ALZM,MAXTTY
		000004			ALZM:	.REPT MAXTTY
						ADRMAC ALZM,\.RPCNT
					.ENDR
						ADRMAC ALZM,\.RPCNT
	060116	013626				.WORD ALZM0
						ADRMAC ALZM,\.RPCNT
	060120	013640				.WORD ALZM1
						ADRMAC ALZM,\.RPCNT
	060122	013652				.WORD ALZM2
						ADRMAC ALZM,\.RPCNT
	060124	013664				.WORD ALZM3
					
					.IRP NAM,<RTST,RTBF>
						ADRCRE NAM,MXRTTY
					.ENDM
						ADRCRE RTST,MXRTTY
		000002			RTST:	.REPT MXRTTY
						ADRMAC RTST,\.RPCNT
					.ENDR
						ADRMAC RTST,\.RPCNT
	060126	175620				.WORD RTST0
						ADRMAC RTST,\.RPCNT
	060130	177560				.WORD RTST1
						ADRCRE RTBF,MXRTTY
		000002			RTBF:	.REPT MXRTTY
						ADRMAC RTBF,\.RPCNT
					.ENDR
						ADRMAC RTBF,\.RPCNT
	060132	175622				.WORD RTBF0
						ADRMAC RTBF,\.RPCNT
	060134	177562				.WORD RTBF1
					
					.IRP NAM,<XTST,XTBF>
						ADRCRE NAM,MXXTTY
					.ENDM
						ADRCRE XTST,MXXTTY
		000003			XTST:	.REPT MXXTTY
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 92
	GLPT;R11MUX 103	PAGE 1.91 	TTY TABLES AND BUFFERS FOR TTYS

						ADRMAC XTST,\.RPCNT
					.ENDR
						ADRMAC XTST,\.RPCNT
	060136	175624				.WORD XTST0
						ADRMAC XTST,\.RPCNT
	060140	177564				.WORD XTST1
						ADRMAC XTST,\.RPCNT
	060142	167770				.WORD XTST2
						ADRCRE XTBF,MXXTTY
		000003			XTBF:	.REPT MXXTTY
						ADRMAC XTBF,\.RPCNT
					.ENDR
						ADRMAC XTBF,\.RPCNT
	060144	175626				.WORD XTBF0
						ADRMAC XTBF,\.RPCNT
	060146	177566				.WORD XTBF1
						ADRMAC XTBF,\.RPCNT
	060150	167772				.WORD XTBF2
					
		060162			ALNUM:	.BLKW MXTTTY		; TABLE OF CURRENT ALLOCATIONS
					
					
					;  TRANSMIT OUTPUT DEVICE STATUS TABLE (MANY TO ONE NECESSITATES INDIRECTION
					; 	TO THIS TABLE)
					
						TOBFMC <0>
		060412			TOBF0:	.BLKW TOBFLN/2
					
	060412	060162			TDST0:	.WORD TOBF0
	060414	060412				.WORD TOBF0+TOBFLN
	060416	060162				.WORD TOBF0
	060420	060162				.WORD TOBF0
	060422	000000				.WORD 0
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 93
	GLPT;R11MUX 103	PAGE 1.92 	TTY TABLES AND BUFFERS FOR TTYS

					; TTY ESCAPE CHAR TABLE
	060424	177777			ESCHTB:	-1		;TTY 23
	060426	177777				-1		;TTY 24
	060430	000033				33		;TTY 25
	060432	177777				-1		;TTY 36
	060434	000033				33
	060436	177777				-1
	060440	177777				-1
	060442	177777				-1
					
					; VT52 TO ANN ARBOR DISPLAY CONTROLLER ESCAPE CODE TRANSLATIONS
					
	060444	005612			VT52TB:	AANOOP
	060446	005616				AAMVUP		; A - MOVE UP
	060450	005630				AAMVDN		; B - MOVE DOWN
	060452	005642				AAMVRT		; C - MOVE RIGHT
	060454	005654				AAMVLF		; D - MOVE LEFT
	060456	005612				AANOOP
	060460	005612				AANOOP
	060462	005612				AANOOP
	060464	005666				AAHOME		; H - HOME UP
	060466	005612				AANOOP
	060470	005740				AAEOS		; J - ERASE TO END OF SCREEN
	060472	005712				AAEOL		; K - ERASE TO END OF LINE
		000015				.REPT 15
						AANOOP
					.ENDR
	060474	005612				AANOOP
	060476	005612				AANOOP
	060500	005612				AANOOP
	060502	005612				AANOOP
	060504	005612				AANOOP
	060506	005612				AANOOP
	060510	005612				AANOOP
	060512	005612				AANOOP
	060514	005612				AANOOP
	060516	005612				AANOOP
	060520	005612				AANOOP
	060522	005612				AANOOP
	060524	005612				AANOOP
	060526	006054				AAPOS		; Y - ABSOLUTE CURSOR POSITIONING
	060530	005612				AANOOP
					
					; ANN ARBOR CONTROLER CONTROL CHAR DISPATCH TABLE
		000007			AACTLT:	.REPT 7
						AACTRL
						.ENDR
	060532	006232				AACTRL
	060534	006232				AACTRL
	060536	006232				AACTRL
	060540	006232				AACTRL
	060542	006232				AACTRL
	060544	006232				AACTRL
	060546	006232				AACTRL
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 94
	GLPT;R11MUX 103	PAGE 1.93 	TTY TABLES AND BUFFERS FOR TTYS

	060550	006234				AABELL
	060552	006236				AABS
	060554	006244				AATAB
	060556	006312				AALF
	060560	006320				AAVT
	060562	006326				AAFF
	060564	006340				AACR
		000022				.REPT 22
						AACTRL
						.ENDR
	060566	006232				AACTRL
	060570	006232				AACTRL
	060572	006232				AACTRL
	060574	006232				AACTRL
	060576	006232				AACTRL
	060600	006232				AACTRL
	060602	006232				AACTRL
	060604	006232				AACTRL
	060606	006232				AACTRL
	060610	006232				AACTRL
	060612	006232				AACTRL
	060614	006232				AACTRL
	060616	006232				AACTRL
	060620	006232				AACTRL
	060622	006232				AACTRL
	060624	006232				AACTRL
	060626	006232				AACTRL
	060630	006232				AACTRL
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 95
	GLPT;R11MUX 103	PAGE 1.94 	TTY TABLES AND BUFFERS FOR TTYS

					
	060632	007012			SKEYTB:	NONAS1
	060634	007012				KBRK
	060636	007016				KESC
	060640	007016				KCALL
	060642	007016				KCLEAR
	060644	007016				KDEL
	060646	007016				KCIRM
	060650	007016				KGRAD
	060652	007016				KCIRP
	060654	007016				KBACK
	060656	007016				KNEXT
	060660	007016				KHELP
	060662	007016				KFORM
	060664	007016				KBS
	060666	007016				KVT
	060670	007016				KCR
	060672	007016				KLINE
	060674	007016				FDELT
	060676	007016				KRPT
	060700	007016				KTAB
	060702	007016				KSPACE
		000013				.REPT 13
						KNOOP
						.ENDR
	060704	007016				KNOOP
	060706	007016				KNOOP
	060710	007016				KNOOP
	060712	007016				KNOOP
	060714	007016				KNOOP
	060716	007016				KNOOP
	060720	007016				KNOOP
	060722	007016				KNOOP
	060724	007016				KNOOP
	060726	007016				KNOOP
	060730	007016				KNOOP
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 96
	GLPT;R11MUX 103	PAGE 1.95 	GOULD VARIABLES AND BUFFERS AND TABLES 

					.SBTTL  GOULD VARIABLES AND BUFFERS AND TABLES 
	060732	000000			MARLEN:	.WORD 0
	060734	000000			DATLEN:	.WORD 0
	060736	000000			DATLN1:	.WORD 0
	060740	000000			ENCLEN:	.WORD 0
	060742	000000			MARLN1:	.WORD 0
	060744	000000			TMPWRD:	.WORD 0
	060746	000000			VALWRD:	.WORD 0
	060750	007130			GLDPND:	.WORD CHRDEC
	060752	007314			WRDPTR:	.WORD MAKWD1
	060754	007350			GLDPTR:	.WORD DATDEC
	060756	000000			EODFLG:	.WORD 0
	060760	000000			QOTFLG:	.WORD 0
	060762	000000			GRFFLG:	.WORD 0
	060764	000000			COLOR:	.WORD 0
	060766	061052			GLPTR:	.WORD GLDBUF
	060770	061052			GTPTR:	.WORD GLDBUF
	060772	137040			GLEND:	.WORD <CORLIM-<LBUFL+22>>
	060774	061052			GLBEG:	.WORD GLDBUF
	060776	061052			GLLIM:	.WORD GLDBUF
	061000	061052			GTLIM:	.WORD GLDBUF
	061002	000000			GLBLK:	.WORD 0
					
	061004	004500			GLIPTR:	.WORD CMIDEC
	061006	000000			JMPFLG:	.WORD 0
	061010	000000			REPFLG:	.WORD 0
	061012	000000			PNDR0:	.WORD 0
	061014	000000			JMPRET:	.WORD 0
	061016	000000			REPRET:	.WORD 0
	061020	000000			REPCNT:	.WORD 0
	061022	000000			GLIDL:	.WORD 0
	061024	000000			GLERR:	.WORD 0
	061026	000000			PAGMNG:	.WORD 0
	061030	000000			SMRFLG:	.WORD 0
	061032	000177			STMSG:	.WORD 177
	061034	000177			STAPAG:	.WORD 177
	061036	000000			STAERR:	.WORD 0
	061040	000000				.WORD 0
	061042	000000				.WORD 0
		000005			STLEN==<.-STMSG>/2
					
	061044	061032			STAMSG:	.WORD STMSG
	061046	000005			STALEN:	.WORD STLEN
	061050	000000			GLDALC:	.WORD 0
					
					;  START OF GOULD BUFFER 
					GLDBUF:
		002000			.END INIT
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 97
	GLPT;R11MUX 103	PAGE 1 	***SYMBOL TABLE***      

	AABELL	006234		ALZM1	013640		GLDTTY	000003H		KCLEAR	007016	
	AABS	006236		ALZM2	013652		GLDWC	166002H		KCR	007016	
	AACPUT	005702		ALZM3	013664		GLDXIT	011006		KDEL	007016	
	AACR	006340		BPTTRP	003152		GLEND	060772		KESC	007016	
	AACTLT	060532		CBSL	000034H		GLERR	061024		KEYBDI	000101H	
	AACTRL	006232		CG	000007H		GLIBR	002742		KEYBUF	167762H	
	AACXIT	006344		CG.BLK	000036H		GLIDL	061022		KEYINT	004204	
	AADONE	006022		CG.FLG	000022H		GLIPTR	061004		KEYSAV	004202	
	AAEOL	005712		CHRDEC	007130		GLIXIT	005202		KEYSTA	167760H	
	AAEOS	005740		CHRNUM	011766		GLLIM	060776		KEYTAB	004346	
	AAFF	006326		CLKCNT	003312		GLOOP	011012		KFORM	007016	
	AAHOME	005666		CLKHND	003160		GLPTR	060766		KGRAD	007016	
	AALF	006312		CMIDEC	004500		GRAPHM	007772		KHELP	007016	
	AAMVDN	005630		COL	000056H		GRFFLG	060762		KLINE	007016	
	AAMVLF	005654		COLOR	060764		GTLIM	061000		KNEXT	007016	
	AAMVRT	005642		COMDEC	007362		GTPTR	060770		KNOOP	007016	
	AAMVUP	005616		CORLIM	137472H		HERE	007204		KRPT	007016	
	AANOOP	005612		CPOSDO	006144		HERE4	007746		KSPACE	007016	
	AAPOS	006054		CPUERR	003152		ILLOPR	003152		KTAB	007016	
	AAPOS1	006066		CTRD0	003446		IMAGE	010006		KVT	007016	
	AAPOS2	006110		CTRT0	003342		IMLACI	000000H		LBUFL	000410H	
	AATAB	006244		DATACH	007310		IMLINT	005220		LHS	177400H	
	AATYST	000002H		DATDEC	007350		IMTRAN	010162		MACTAB	007556	
	AAVT	006320		DATHAC	007276		IN0XIT	003562		MAKWD1	007314	
	AIKTAB	013216		DATLEN	060734		INGLSB	012730		MAKWD2	007332	
	AINASC	013144		DATLN1	060736		INIT	002000		MARLEN	060732	
	AL.BLK	000036H		DLAYCM	007662		INRD0	003346		MARLN1	060742	
	AL.FLG	000022H		DLSTA1	003374		INRPUT	003736		MASCII	177600	
	ALCI	060106		DLSTA2	003734		INRT0	003010		MASK37	177740H	
	ALCI0	013637H		DLYTST	007570		INRT1	003026		MAXMUX	177774H	
	ALCI1	013651H		DMADEC	007764		INRT3	003044		MAXTTY	000004H	
	ALCI2	013663H		DR11MI	000000H		INRTSB	003702		MBYTE	177400	
	ALCI3	013675H		EMTTRP	003152		INSPTB	012636		MCNT	057756	
	ALCINC	000137H		ENCLEN	060740		INTD0	003572		MCNT0	013616	
	ALCLIM	000137H		EODFLG	060756		INTT0	003062		MCNT1	013620	
	ALCM	057766		EOFBLK	011202		INTT1	003100		MCNT2	013622	
	ALCM0	013632		EOFEND	011644		INTT2	003116		MCNT3	013624	
	ALCM1	013644		EOLDO	006036		INTT3	003134		MORECK	005504	
	ALCM2	013656		ESCHTB	060424		INTTSB	004054		MR.BLK	000034H	
	ALCM3	013670		FDELT	007016		INTYSB	012402		MRAL	060056	
	ALCMAX	000276H		GLBEG	060774		INVBIT	040000H		MRAL0	002312	
	ALCP	057776		GLBLK	061002		IOTTRP	003152		MRAL1	002346	
	ALCP0	013676		GLDALC	061050		JMPDEC	007124		MRAL2	002402	
	ALCP1	013700		GLDBUF	061052		JMPESC	000052H		MRAL3	002256	
	ALCP2	013702		GLDCA	166004H		JMPFLG	061006		MRALSB	012060	
	ALCP3	013704		GLDCSR	166000H		JMPRET	061014		MRGLSB	007066	
	ALLCSB	012654		GLDERR	004410		KBACK	007016		MRIMSB	012374	
	ALNUM	060152		GLDFIN	010724		KBRK	007012		MRPLSB	012372	
	ALPHAM	010212		GLDINT	004376		KBS	007016		MRTY	060046	
	ALPTRN	010336		GLDPND	060750		KCALL	007016		MRTY0	002274	
	ALZM	060116		GLDPTR	060754		KCIRM	007016		MRTY1	002330	
	ALZM0	013626		GLDTIM	000030H		KCIRP	007016		MRTY2	002364	
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 98
	GLPT;R11MUX 103	PAGE 1 	***SYMBOL TABLE***      

	MRTY3	002240		R2	000002R		RTBF1	177562H		STTY1	002212	
	MRTY4	002420		R3	000003R		RTST	060126		STTY2	002214	
	MRTYSB	005224		R4	000004R		RTST0	175620H		STTY3	002216	
	MT.BLK	000034H		R5	000005R		RTST1	177560H		T.FLGS	000040H	
	MTCG	060076		RCHGET	005310		RTSTRH	005260		TCHGET	006442	
	MTCG0	002436		RCHPUT	005452		RUNLEN	010366		TCHPUT	006654	
	MTCG1	002472		RDBF0	175612H		RUNLN2	010414		TDST0	060412	
	MTCG2	002526		RDST0	175610H		RUNTRN	010636		TESTLB	002240	
	MTCG3	002562		REPCNT	061020		SALBLK	011144		TI.BEG	000004H	
	MTCGSB	012252		REPFLG	061010		SALEND	011154		TI.BLK	000030H	
	MTIMSB	012376		REPRET	061016		SGLIBR	003006		TI.END	000002H	
	MTTY	060066		REPTRN	007730		SHGBLK	011170		TI.FLG	000010H	
	MTTY0	002420		RI.BEG	000004H		SHGEND	011202		TI.LIM	000006H	
	MTTY1	002454		RI.BLK	000030H		SKEYTB	060632		TI.PTR	000000H	
	MTTY2	002510		RI.END	000002H		SLALPH	140000H		TIBF0	017436	
	MTTY3	002544		RI.FLG	000010H		SLEOF	170000H		TIBF1	017476	
	MTTY4	002600		RI.LIM	000006H		SLGBLK	011154		TIBF2	017536	
	MTTYSB	006350		RI.PTR	000000H		SLGEND	011170		TIBF3	017576	
	MXATTY	000001H		RIBF0	014436		SLHGRF	160000H		TIBFLN	000040H	
	MXRTTY	000002H		RIBF1	014736		SLLGRF	150000H		TMPWRD	060744	
	MXTTTY	000004H		RIBF2	015236		SLRD0	003376		TO.BEG	000016H	
	MXXTTY	000003H		RIBF3	015536		SMEARP	003314		TO.BLK	000032H	
	NATEND	000051H		RIBFLN	000300H		SMRBLK	011744		TO.END	000014H	
	NONAS1	007012		RO.BEG	000016H		SMREND	011766		TO.LIM	000020H	
	NOPIN	000240H		RO.BLK	000032H		SMRFLG	061030		TO.PTR	000012H	
	NULL	005222		RO.END	000014H		SP	000006R		TOBF0	060162	
	NULLSB	012400		RO.ESC	000050H		SRAL	002220		TOBFLN	000230H	
	OD.BEG	000004H		RO.ESF	000046H		SRAL0	002220		TS.CNT	000044H	
	OD.BLK	000010H		RO.LIM	000020H		SRAL1	002222		TS.PTR	000042H	
	OD.END	000002H		RO.PTR	000012H		SRAL2	002224		TSTA	060016	
	OD.LIM	000006H		ROBF0	016036		SRAL3	002226		TSTA0	014206	
	OD.PTR	000000H		ROBF1	016336		SRTY	002200		TSTA1	014254	
	P5	000240		ROBF2	016636		SRTY0	002200		TSTA2	014322	
	P7	000340		ROBF3	017136		SRTY1	002202		TSTA3	014370	
	PAGLST	011644		ROBFLN	000300H		SRTY2	002204		TSTR	060036	
	PAGMNG	061026		ROW	000054H		SRTY3	002206		TSTR0	057636	
	PC	000007R		RS.CNT	000044H		SSTABR	003004		TSTR1	057662	
	PLAC	002600		RS.PTR	000042H		STAERR	061036		TSTR2	057706	
	PLDBUF	000000H		RSTA	060006		STALEN	061046		TSTR3	057732	
	PLPINT	005216		RSTA0	013706		STAMSG	061044		TSTRLN	000024H	
	PLPSTA	000000H		RSTA1	013766		STAPAG	061034		TTSTRH	006404	
	PLXBUF	000000H		RSTA2	014046		STATBR	002600		TTYNUM	000025H	
	PLYBUF	000000H		RSTA3	014126		STCG	002230		UPWORD	007566	
	PNDR0	061012		RSTALL	003326		STCG0	002230		UUOH	003152	
	POWROF	003316		RSTR	060026		STCG1	002232		VALWRD	060746	
	PRIOR0	000340H		RSTR0	017636		STCG2	002234		VCRD0	003340	
	PRIOR7	000340H		RSTR1	027636		STCG3	002236		VCRT0	003344	
	PTRD0	003474		RSTR2	037636		STLEN	000005H		VT52TB	060444	
	QOTFLG	060760		RSTR3	047636		STMSG	061032		WAITIN	000001H	
	R.FLGS	000040H		RSTRLN	010000H		STRIP	177600H		WAITPL	002776	
	R0	000000R		RTBF	060132		STTY	002210		WRDPTR	060752	
	R1	000001R		RTBF0	175622H		STTY0	002210		XDBF0	175616H	
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 99
	GLPT;R11MUX 103	PAGE 1 	***SYMBOL TABLE***      

	XDST0	175614H		%FXCSR	175634H		%MSTR7	000347H	
	XTBF	060144		%GCADV	000201H		%O1ABF	167772H	
	XTBF0	175626H		%GCCUT	000002H		%O1ACS	167770H	
	XTBF1	177566H		%GCERP	000301H		%O1BBF	167776H	
	XTBF2	167772H		%GCFF	000000H		%O1BCS	167774H	
	XTST	060136		%GCGRF	000001H		%PLACS	000000H	
	XTST0	175624H		%GCHOM	000200H		%PLDBF	000000H	
	XTST1	177564H		%GCIOF	000007H		%PLPPR	000200	
	XTST2	167770H		%GCION	000006H		%PLPV	000214	
	%AABF	167772H		%GCLSL	000005H		%PLXBF	000000H	
	%AACS	167770H		%GCOFF	000004H		%PLYBF	000000H	
	%AADCV	000210		%GCON	000003H		%PWRV	000024	
	%AADPR	000200		%GCSRP	000300H		%SBITS	177740	
	%AAPOS	000017H		%GLCA	166004		%SHLOK	000010	
	%BPTV	000014		%GLCSR	166000		%SPKEY	000200	
	%CCACK	000301		%GLDPR	000240		%TRPV	000034	
	%CCEOD	000206		%GLDV	000174		%UNDEF	000000H	
	%CCQOT	000215		%GLRPR	000200	
	%CCSOD	000205		%GLRV	000330	
	%CLRPR	000200		%GLWC	166002	
	%CLRV	000060		%GLXPR	000200	
	%CLTPR	000200		%GLXV	000334	
	%CLXV	000064		%GRBUF	175642H	
	%CRBUF	177562H		%GRCSR	175640H	
	%CRCSR	177560H		%GSBSY	004000H	
	%CXBUF	177566H		%GSDON	002000H	
	%CXCSR	177564H		%GSERR	040400H	
	%DLRPR	000300		%GSNRD	000400H	
	%DLRV	000300		%GSPAP	020000H	
	%DLXPR	000300		%GSTIM	040000H	
	%DLXV	000304		%GSVAC	010000H	
	%DRBUF	175612H		%GXBUF	175646H	
	%DRCSR	175610H		%GXCSR	175644H	
	%DXBUF	175616H		%I1ABF	167762H	
	%DXCSR	175614H		%I1ACS	167760H	
	%ELRPR	000200		%I1BBF	167766H	
	%ELRV	000310		%I1BCS	167764H	
	%ELXPR	000200		%ILIV	000010	
	%ELXV	000314		%IOTV	000020	
	%EMTV	000030		%KEYPR	000200	
	%ERBUF	175622H		%KEYV	000200	
	%ERCSR	175620H		%KYBUF	167762H	
	%ERRV	000004		%KYSTA	167760H	
	%EXBUF	175626H		%LKPR	000300	
	%EXCSR	175624H		%LKV	000100	
	%FLRPR	000200		%MSTR	000340H	
	%FLRV	000320		%MSTR1	000341H	
	%FLXPR	000200		%MSTR2	000342H	
	%FLXV	000324		%MSTR3	000343H	
	%FRBUF	175632H		%MSTR4	000344H	
	%FRCSR	175630H		%MSTR5	000345H	
	%FXBUF	175636H		%MSTR6	000346H	
	TERMINAL MULTIPEXER AND GOULD DRIVER	PALX 235	11/12/76  16:04:09	PAGE 100
	GLPT;R11MUX 103	PAGE 1 	***SYMBOL TABLE***      


1.8 WDS AVG INSN LENGTH

4 SECONDS RUN-TIME
